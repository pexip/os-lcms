# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lcms', [dirname(__file__)])
        except ImportError:
            import _lcms
            return _lcms
        if fp is not None:
            try:
                _mod = imp.load_module('_lcms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lcms = swig_import_helper()
    del swig_import_helper
else:
    import _lcms
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class COLORW(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COLORW, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COLORW, name)
    __swig_setmethods__["w"] = _lcms.COLORW_w_set
    __swig_getmethods__["w"] = _lcms.COLORW_w_get
    if _newclass:w = _swig_property(_lcms.COLORW_w_get, _lcms.COLORW_w_set)
    def __init__(self): 
        this = _lcms.new_COLORW()
        try: self.this.append(this)
        except: self.this = this
    def __repr__(self): return _lcms.COLORW___repr__(self)
    def __getitem__(self, *args): return _lcms.COLORW___getitem__(self, *args)
    def __setitem__(self, *args): return _lcms.COLORW___setitem__(self, *args)
    __swig_destroy__ = _lcms.delete_COLORW
    __del__ = lambda self : None;
COLORW_swigregister = _lcms.COLORW_swigregister
COLORW_swigregister(COLORW)

class COLORB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COLORB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COLORB, name)
    __swig_setmethods__["b"] = _lcms.COLORB_b_set
    __swig_getmethods__["b"] = _lcms.COLORB_b_get
    if _newclass:b = _swig_property(_lcms.COLORB_b_get, _lcms.COLORB_b_set)
    def __init__(self): 
        this = _lcms.new_COLORB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_COLORB
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.COLORB___repr__(self)
    def __getitem__(self, *args): return _lcms.COLORB___getitem__(self, *args)
    def __setitem__(self, *args): return _lcms.COLORB___setitem__(self, *args)
COLORB_swigregister = _lcms.COLORB_swigregister
COLORB_swigregister(COLORB)

class IT8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IT8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IT8, name)
    __swig_setmethods__["hIT8"] = _lcms.IT8_hIT8_set
    __swig_getmethods__["hIT8"] = _lcms.IT8_hIT8_get
    if _newclass:hIT8 = _swig_property(_lcms.IT8_hIT8_get, _lcms.IT8_hIT8_set)
    def __init__(self, *args): 
        this = _lcms.new_IT8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_IT8
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.IT8___repr__(self)
    def saveToFile(self, *args): return _lcms.IT8_saveToFile(self, *args)
    def tableCount(self): return _lcms.IT8_tableCount(self)
    def setTable(self, *args): return _lcms.IT8_setTable(self, *args)
    def getSheetType(self): return _lcms.IT8_getSheetType(self)
    def setSheetType(self, *args): return _lcms.IT8_setSheetType(self, *args)
    def addComment(self, *args): return _lcms.IT8_addComment(self, *args)
    def setProperty(self, *args): return _lcms.IT8_setProperty(self, *args)
    def setPropertyAsHex(self, *args): return _lcms.IT8_setPropertyAsHex(self, *args)
    def setPropertyUncooked(self, *args): return _lcms.IT8_setPropertyUncooked(self, *args)
    def getProperty(self, *args): return _lcms.IT8_getProperty(self, *args)
    def getPropertyAsDbl(self, *args): return _lcms.IT8_getPropertyAsDbl(self, *args)
    def getData(self, *args): return _lcms.IT8_getData(self, *args)
    def getDataAsDbl(self, *args): return _lcms.IT8_getDataAsDbl(self, *args)
    def setData(self, *args): return _lcms.IT8_setData(self, *args)
    def setDataFormat(self, *args): return _lcms.IT8_setDataFormat(self, *args)
    def getPatchName(self, *args): return _lcms.IT8_getPatchName(self, *args)
    def getDataFormat(self, *args): return _lcms.IT8_getDataFormat(self, *args)
    def enumDataFormat(self): return _lcms.IT8_enumDataFormat(self)
    def enumProperties(self): return _lcms.IT8_enumProperties(self)
    def setTableByLabel(self, *args): return _lcms.IT8_setTableByLabel(self, *args)
    def getRow(self, *args): return _lcms.IT8_getRow(self, *args)
    def getCol(self, *args): return _lcms.IT8_getCol(self, *args)
IT8_swigregister = _lcms.IT8_swigregister
IT8_swigregister(IT8)

NON_WINDOWS = _lcms.NON_WINDOWS
LCMS_VERSION = _lcms.LCMS_VERSION
class icCLutStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icCLutStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icCLutStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gridPoints"] = _lcms.icCLutStruct_gridPoints_set
    __swig_getmethods__["gridPoints"] = _lcms.icCLutStruct_gridPoints_get
    if _newclass:gridPoints = _swig_property(_lcms.icCLutStruct_gridPoints_get, _lcms.icCLutStruct_gridPoints_set)
    __swig_setmethods__["prec"] = _lcms.icCLutStruct_prec_set
    __swig_getmethods__["prec"] = _lcms.icCLutStruct_prec_get
    if _newclass:prec = _swig_property(_lcms.icCLutStruct_prec_get, _lcms.icCLutStruct_prec_set)
    __swig_setmethods__["pad1"] = _lcms.icCLutStruct_pad1_set
    __swig_getmethods__["pad1"] = _lcms.icCLutStruct_pad1_get
    if _newclass:pad1 = _swig_property(_lcms.icCLutStruct_pad1_get, _lcms.icCLutStruct_pad1_set)
    __swig_setmethods__["pad2"] = _lcms.icCLutStruct_pad2_set
    __swig_getmethods__["pad2"] = _lcms.icCLutStruct_pad2_get
    if _newclass:pad2 = _swig_property(_lcms.icCLutStruct_pad2_get, _lcms.icCLutStruct_pad2_set)
    __swig_setmethods__["pad3"] = _lcms.icCLutStruct_pad3_set
    __swig_getmethods__["pad3"] = _lcms.icCLutStruct_pad3_get
    if _newclass:pad3 = _swig_property(_lcms.icCLutStruct_pad3_get, _lcms.icCLutStruct_pad3_set)
    def __init__(self): 
        this = _lcms.new_icCLutStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_icCLutStruct
    __del__ = lambda self : None;
icCLutStruct_swigregister = _lcms.icCLutStruct_swigregister
icCLutStruct_swigregister(icCLutStruct)

class icLutAtoB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icLutAtoB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icLutAtoB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputChan"] = _lcms.icLutAtoB_inputChan_set
    __swig_getmethods__["inputChan"] = _lcms.icLutAtoB_inputChan_get
    if _newclass:inputChan = _swig_property(_lcms.icLutAtoB_inputChan_get, _lcms.icLutAtoB_inputChan_set)
    __swig_setmethods__["outputChan"] = _lcms.icLutAtoB_outputChan_set
    __swig_getmethods__["outputChan"] = _lcms.icLutAtoB_outputChan_get
    if _newclass:outputChan = _swig_property(_lcms.icLutAtoB_outputChan_get, _lcms.icLutAtoB_outputChan_set)
    __swig_setmethods__["pad1"] = _lcms.icLutAtoB_pad1_set
    __swig_getmethods__["pad1"] = _lcms.icLutAtoB_pad1_get
    if _newclass:pad1 = _swig_property(_lcms.icLutAtoB_pad1_get, _lcms.icLutAtoB_pad1_set)
    __swig_setmethods__["pad2"] = _lcms.icLutAtoB_pad2_set
    __swig_getmethods__["pad2"] = _lcms.icLutAtoB_pad2_get
    if _newclass:pad2 = _swig_property(_lcms.icLutAtoB_pad2_get, _lcms.icLutAtoB_pad2_set)
    __swig_setmethods__["offsetB"] = _lcms.icLutAtoB_offsetB_set
    __swig_getmethods__["offsetB"] = _lcms.icLutAtoB_offsetB_get
    if _newclass:offsetB = _swig_property(_lcms.icLutAtoB_offsetB_get, _lcms.icLutAtoB_offsetB_set)
    __swig_setmethods__["offsetMat"] = _lcms.icLutAtoB_offsetMat_set
    __swig_getmethods__["offsetMat"] = _lcms.icLutAtoB_offsetMat_get
    if _newclass:offsetMat = _swig_property(_lcms.icLutAtoB_offsetMat_get, _lcms.icLutAtoB_offsetMat_set)
    __swig_setmethods__["offsetM"] = _lcms.icLutAtoB_offsetM_set
    __swig_getmethods__["offsetM"] = _lcms.icLutAtoB_offsetM_get
    if _newclass:offsetM = _swig_property(_lcms.icLutAtoB_offsetM_get, _lcms.icLutAtoB_offsetM_set)
    __swig_setmethods__["offsetC"] = _lcms.icLutAtoB_offsetC_set
    __swig_getmethods__["offsetC"] = _lcms.icLutAtoB_offsetC_get
    if _newclass:offsetC = _swig_property(_lcms.icLutAtoB_offsetC_get, _lcms.icLutAtoB_offsetC_set)
    __swig_setmethods__["offsetA"] = _lcms.icLutAtoB_offsetA_set
    __swig_getmethods__["offsetA"] = _lcms.icLutAtoB_offsetA_get
    if _newclass:offsetA = _swig_property(_lcms.icLutAtoB_offsetA_get, _lcms.icLutAtoB_offsetA_set)
    def __init__(self): 
        this = _lcms.new_icLutAtoB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_icLutAtoB
    __del__ = lambda self : None;
icLutAtoB_swigregister = _lcms.icLutAtoB_swigregister
icLutAtoB_swigregister(icLutAtoB)

class icLutBtoA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icLutBtoA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icLutBtoA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputChan"] = _lcms.icLutBtoA_inputChan_set
    __swig_getmethods__["inputChan"] = _lcms.icLutBtoA_inputChan_get
    if _newclass:inputChan = _swig_property(_lcms.icLutBtoA_inputChan_get, _lcms.icLutBtoA_inputChan_set)
    __swig_setmethods__["outputChan"] = _lcms.icLutBtoA_outputChan_set
    __swig_getmethods__["outputChan"] = _lcms.icLutBtoA_outputChan_get
    if _newclass:outputChan = _swig_property(_lcms.icLutBtoA_outputChan_get, _lcms.icLutBtoA_outputChan_set)
    __swig_setmethods__["pad1"] = _lcms.icLutBtoA_pad1_set
    __swig_getmethods__["pad1"] = _lcms.icLutBtoA_pad1_get
    if _newclass:pad1 = _swig_property(_lcms.icLutBtoA_pad1_get, _lcms.icLutBtoA_pad1_set)
    __swig_setmethods__["pad2"] = _lcms.icLutBtoA_pad2_set
    __swig_getmethods__["pad2"] = _lcms.icLutBtoA_pad2_get
    if _newclass:pad2 = _swig_property(_lcms.icLutBtoA_pad2_get, _lcms.icLutBtoA_pad2_set)
    __swig_setmethods__["offsetB"] = _lcms.icLutBtoA_offsetB_set
    __swig_getmethods__["offsetB"] = _lcms.icLutBtoA_offsetB_get
    if _newclass:offsetB = _swig_property(_lcms.icLutBtoA_offsetB_get, _lcms.icLutBtoA_offsetB_set)
    __swig_setmethods__["offsetMat"] = _lcms.icLutBtoA_offsetMat_set
    __swig_getmethods__["offsetMat"] = _lcms.icLutBtoA_offsetMat_get
    if _newclass:offsetMat = _swig_property(_lcms.icLutBtoA_offsetMat_get, _lcms.icLutBtoA_offsetMat_set)
    __swig_setmethods__["offsetM"] = _lcms.icLutBtoA_offsetM_set
    __swig_getmethods__["offsetM"] = _lcms.icLutBtoA_offsetM_get
    if _newclass:offsetM = _swig_property(_lcms.icLutBtoA_offsetM_get, _lcms.icLutBtoA_offsetM_set)
    __swig_setmethods__["offsetC"] = _lcms.icLutBtoA_offsetC_set
    __swig_getmethods__["offsetC"] = _lcms.icLutBtoA_offsetC_get
    if _newclass:offsetC = _swig_property(_lcms.icLutBtoA_offsetC_get, _lcms.icLutBtoA_offsetC_set)
    __swig_setmethods__["offsetA"] = _lcms.icLutBtoA_offsetA_set
    __swig_getmethods__["offsetA"] = _lcms.icLutBtoA_offsetA_get
    if _newclass:offsetA = _swig_property(_lcms.icLutBtoA_offsetA_get, _lcms.icLutBtoA_offsetA_set)
    def __init__(self): 
        this = _lcms.new_icLutBtoA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_icLutBtoA
    __del__ = lambda self : None;
icLutBtoA_swigregister = _lcms.icLutBtoA_swigregister
icLutBtoA_swigregister(icLutBtoA)

MAXCHANNELS = _lcms.MAXCHANNELS
PT_ANY = _lcms.PT_ANY
PT_GRAY = _lcms.PT_GRAY
PT_RGB = _lcms.PT_RGB
PT_CMY = _lcms.PT_CMY
PT_CMYK = _lcms.PT_CMYK
PT_YCbCr = _lcms.PT_YCbCr
PT_YUV = _lcms.PT_YUV
PT_XYZ = _lcms.PT_XYZ
PT_Lab = _lcms.PT_Lab
PT_YUVK = _lcms.PT_YUVK
PT_HSV = _lcms.PT_HSV
PT_HLS = _lcms.PT_HLS
PT_Yxy = _lcms.PT_Yxy
PT_HiFi = _lcms.PT_HiFi
PT_HiFi7 = _lcms.PT_HiFi7
PT_HiFi8 = _lcms.PT_HiFi8
PT_HiFi9 = _lcms.PT_HiFi9
PT_HiFi10 = _lcms.PT_HiFi10
PT_HiFi11 = _lcms.PT_HiFi11
PT_HiFi12 = _lcms.PT_HiFi12
PT_HiFi13 = _lcms.PT_HiFi13
PT_HiFi14 = _lcms.PT_HiFi14
PT_HiFi15 = _lcms.PT_HiFi15
TYPE_GRAY_8 = _lcms.TYPE_GRAY_8
TYPE_GRAY_8_REV = _lcms.TYPE_GRAY_8_REV
TYPE_GRAY_16 = _lcms.TYPE_GRAY_16
TYPE_GRAY_16_REV = _lcms.TYPE_GRAY_16_REV
TYPE_GRAY_16_SE = _lcms.TYPE_GRAY_16_SE
TYPE_GRAYA_8 = _lcms.TYPE_GRAYA_8
TYPE_GRAYA_16 = _lcms.TYPE_GRAYA_16
TYPE_GRAYA_16_SE = _lcms.TYPE_GRAYA_16_SE
TYPE_GRAYA_8_PLANAR = _lcms.TYPE_GRAYA_8_PLANAR
TYPE_GRAYA_16_PLANAR = _lcms.TYPE_GRAYA_16_PLANAR
TYPE_RGB_8 = _lcms.TYPE_RGB_8
TYPE_RGB_8_PLANAR = _lcms.TYPE_RGB_8_PLANAR
TYPE_BGR_8 = _lcms.TYPE_BGR_8
TYPE_BGR_8_PLANAR = _lcms.TYPE_BGR_8_PLANAR
TYPE_RGB_16 = _lcms.TYPE_RGB_16
TYPE_RGB_16_PLANAR = _lcms.TYPE_RGB_16_PLANAR
TYPE_RGB_16_SE = _lcms.TYPE_RGB_16_SE
TYPE_BGR_16 = _lcms.TYPE_BGR_16
TYPE_BGR_16_PLANAR = _lcms.TYPE_BGR_16_PLANAR
TYPE_BGR_16_SE = _lcms.TYPE_BGR_16_SE
TYPE_RGBA_8 = _lcms.TYPE_RGBA_8
TYPE_RGBA_8_PLANAR = _lcms.TYPE_RGBA_8_PLANAR
TYPE_RGBA_16 = _lcms.TYPE_RGBA_16
TYPE_RGBA_16_PLANAR = _lcms.TYPE_RGBA_16_PLANAR
TYPE_RGBA_16_SE = _lcms.TYPE_RGBA_16_SE
TYPE_ARGB_8 = _lcms.TYPE_ARGB_8
TYPE_ARGB_16 = _lcms.TYPE_ARGB_16
TYPE_ABGR_8 = _lcms.TYPE_ABGR_8
TYPE_ABGR_16 = _lcms.TYPE_ABGR_16
TYPE_ABGR_16_PLANAR = _lcms.TYPE_ABGR_16_PLANAR
TYPE_ABGR_16_SE = _lcms.TYPE_ABGR_16_SE
TYPE_BGRA_8 = _lcms.TYPE_BGRA_8
TYPE_BGRA_16 = _lcms.TYPE_BGRA_16
TYPE_BGRA_16_SE = _lcms.TYPE_BGRA_16_SE
TYPE_CMY_8 = _lcms.TYPE_CMY_8
TYPE_CMY_8_PLANAR = _lcms.TYPE_CMY_8_PLANAR
TYPE_CMY_16 = _lcms.TYPE_CMY_16
TYPE_CMY_16_PLANAR = _lcms.TYPE_CMY_16_PLANAR
TYPE_CMY_16_SE = _lcms.TYPE_CMY_16_SE
TYPE_CMYK_8 = _lcms.TYPE_CMYK_8
TYPE_CMYKA_8 = _lcms.TYPE_CMYKA_8
TYPE_CMYK_8_REV = _lcms.TYPE_CMYK_8_REV
TYPE_YUVK_8 = _lcms.TYPE_YUVK_8
TYPE_CMYK_8_PLANAR = _lcms.TYPE_CMYK_8_PLANAR
TYPE_CMYK_16 = _lcms.TYPE_CMYK_16
TYPE_CMYK_16_REV = _lcms.TYPE_CMYK_16_REV
TYPE_YUVK_16 = _lcms.TYPE_YUVK_16
TYPE_CMYK_16_PLANAR = _lcms.TYPE_CMYK_16_PLANAR
TYPE_CMYK_16_SE = _lcms.TYPE_CMYK_16_SE
TYPE_KYMC_8 = _lcms.TYPE_KYMC_8
TYPE_KYMC_16 = _lcms.TYPE_KYMC_16
TYPE_KYMC_16_SE = _lcms.TYPE_KYMC_16_SE
TYPE_KCMY_8 = _lcms.TYPE_KCMY_8
TYPE_KCMY_8_REV = _lcms.TYPE_KCMY_8_REV
TYPE_KCMY_16 = _lcms.TYPE_KCMY_16
TYPE_KCMY_16_REV = _lcms.TYPE_KCMY_16_REV
TYPE_KCMY_16_SE = _lcms.TYPE_KCMY_16_SE
TYPE_CMYK5_8 = _lcms.TYPE_CMYK5_8
TYPE_CMYK5_16 = _lcms.TYPE_CMYK5_16
TYPE_CMYK5_16_SE = _lcms.TYPE_CMYK5_16_SE
TYPE_KYMC5_8 = _lcms.TYPE_KYMC5_8
TYPE_KYMC5_16 = _lcms.TYPE_KYMC5_16
TYPE_KYMC5_16_SE = _lcms.TYPE_KYMC5_16_SE
TYPE_CMYKcm_8 = _lcms.TYPE_CMYKcm_8
TYPE_CMYKcm_8_PLANAR = _lcms.TYPE_CMYKcm_8_PLANAR
TYPE_CMYKcm_16 = _lcms.TYPE_CMYKcm_16
TYPE_CMYKcm_16_PLANAR = _lcms.TYPE_CMYKcm_16_PLANAR
TYPE_CMYKcm_16_SE = _lcms.TYPE_CMYKcm_16_SE
TYPE_CMYK7_8 = _lcms.TYPE_CMYK7_8
TYPE_CMYK7_16 = _lcms.TYPE_CMYK7_16
TYPE_CMYK7_16_SE = _lcms.TYPE_CMYK7_16_SE
TYPE_KYMC7_8 = _lcms.TYPE_KYMC7_8
TYPE_KYMC7_16 = _lcms.TYPE_KYMC7_16
TYPE_KYMC7_16_SE = _lcms.TYPE_KYMC7_16_SE
TYPE_CMYK8_8 = _lcms.TYPE_CMYK8_8
TYPE_CMYK8_16 = _lcms.TYPE_CMYK8_16
TYPE_CMYK8_16_SE = _lcms.TYPE_CMYK8_16_SE
TYPE_KYMC8_8 = _lcms.TYPE_KYMC8_8
TYPE_KYMC8_16 = _lcms.TYPE_KYMC8_16
TYPE_KYMC8_16_SE = _lcms.TYPE_KYMC8_16_SE
TYPE_CMYK9_8 = _lcms.TYPE_CMYK9_8
TYPE_CMYK9_16 = _lcms.TYPE_CMYK9_16
TYPE_CMYK9_16_SE = _lcms.TYPE_CMYK9_16_SE
TYPE_KYMC9_8 = _lcms.TYPE_KYMC9_8
TYPE_KYMC9_16 = _lcms.TYPE_KYMC9_16
TYPE_KYMC9_16_SE = _lcms.TYPE_KYMC9_16_SE
TYPE_CMYK10_8 = _lcms.TYPE_CMYK10_8
TYPE_CMYK10_16 = _lcms.TYPE_CMYK10_16
TYPE_CMYK10_16_SE = _lcms.TYPE_CMYK10_16_SE
TYPE_KYMC10_8 = _lcms.TYPE_KYMC10_8
TYPE_KYMC10_16 = _lcms.TYPE_KYMC10_16
TYPE_KYMC10_16_SE = _lcms.TYPE_KYMC10_16_SE
TYPE_CMYK11_8 = _lcms.TYPE_CMYK11_8
TYPE_CMYK11_16 = _lcms.TYPE_CMYK11_16
TYPE_CMYK11_16_SE = _lcms.TYPE_CMYK11_16_SE
TYPE_KYMC11_8 = _lcms.TYPE_KYMC11_8
TYPE_KYMC11_16 = _lcms.TYPE_KYMC11_16
TYPE_KYMC11_16_SE = _lcms.TYPE_KYMC11_16_SE
TYPE_CMYK12_8 = _lcms.TYPE_CMYK12_8
TYPE_CMYK12_16 = _lcms.TYPE_CMYK12_16
TYPE_CMYK12_16_SE = _lcms.TYPE_CMYK12_16_SE
TYPE_KYMC12_8 = _lcms.TYPE_KYMC12_8
TYPE_KYMC12_16 = _lcms.TYPE_KYMC12_16
TYPE_KYMC12_16_SE = _lcms.TYPE_KYMC12_16_SE
TYPE_XYZ_16 = _lcms.TYPE_XYZ_16
TYPE_Lab_8 = _lcms.TYPE_Lab_8
TYPE_ALab_8 = _lcms.TYPE_ALab_8
TYPE_Lab_16 = _lcms.TYPE_Lab_16
TYPE_Yxy_16 = _lcms.TYPE_Yxy_16
TYPE_YCbCr_8 = _lcms.TYPE_YCbCr_8
TYPE_YCbCr_8_PLANAR = _lcms.TYPE_YCbCr_8_PLANAR
TYPE_YCbCr_16 = _lcms.TYPE_YCbCr_16
TYPE_YCbCr_16_PLANAR = _lcms.TYPE_YCbCr_16_PLANAR
TYPE_YCbCr_16_SE = _lcms.TYPE_YCbCr_16_SE
TYPE_YUV_8 = _lcms.TYPE_YUV_8
TYPE_YUV_8_PLANAR = _lcms.TYPE_YUV_8_PLANAR
TYPE_YUV_16 = _lcms.TYPE_YUV_16
TYPE_YUV_16_PLANAR = _lcms.TYPE_YUV_16_PLANAR
TYPE_YUV_16_SE = _lcms.TYPE_YUV_16_SE
TYPE_HLS_8 = _lcms.TYPE_HLS_8
TYPE_HLS_8_PLANAR = _lcms.TYPE_HLS_8_PLANAR
TYPE_HLS_16 = _lcms.TYPE_HLS_16
TYPE_HLS_16_PLANAR = _lcms.TYPE_HLS_16_PLANAR
TYPE_HLS_16_SE = _lcms.TYPE_HLS_16_SE
TYPE_HSV_8 = _lcms.TYPE_HSV_8
TYPE_HSV_8_PLANAR = _lcms.TYPE_HSV_8_PLANAR
TYPE_HSV_16 = _lcms.TYPE_HSV_16
TYPE_HSV_16_PLANAR = _lcms.TYPE_HSV_16_PLANAR
TYPE_HSV_16_SE = _lcms.TYPE_HSV_16_SE
TYPE_NAMED_COLOR_INDEX = _lcms.TYPE_NAMED_COLOR_INDEX
TYPE_XYZ_DBL = _lcms.TYPE_XYZ_DBL
TYPE_Lab_DBL = _lcms.TYPE_Lab_DBL
TYPE_GRAY_DBL = _lcms.TYPE_GRAY_DBL
TYPE_RGB_DBL = _lcms.TYPE_RGB_DBL
TYPE_CMYK_DBL = _lcms.TYPE_CMYK_DBL
class LCMSGAMMAPARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LCMSGAMMAPARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LCMSGAMMAPARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Crc32"] = _lcms.LCMSGAMMAPARAMS_Crc32_set
    __swig_getmethods__["Crc32"] = _lcms.LCMSGAMMAPARAMS_Crc32_get
    if _newclass:Crc32 = _swig_property(_lcms.LCMSGAMMAPARAMS_Crc32_get, _lcms.LCMSGAMMAPARAMS_Crc32_set)
    __swig_setmethods__["Type"] = _lcms.LCMSGAMMAPARAMS_Type_set
    __swig_getmethods__["Type"] = _lcms.LCMSGAMMAPARAMS_Type_get
    if _newclass:Type = _swig_property(_lcms.LCMSGAMMAPARAMS_Type_get, _lcms.LCMSGAMMAPARAMS_Type_set)
    __swig_setmethods__["Params"] = _lcms.LCMSGAMMAPARAMS_Params_set
    __swig_getmethods__["Params"] = _lcms.LCMSGAMMAPARAMS_Params_get
    if _newclass:Params = _swig_property(_lcms.LCMSGAMMAPARAMS_Params_get, _lcms.LCMSGAMMAPARAMS_Params_set)
    def __init__(self): 
        this = _lcms.new_LCMSGAMMAPARAMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_LCMSGAMMAPARAMS
    __del__ = lambda self : None;
LCMSGAMMAPARAMS_swigregister = _lcms.LCMSGAMMAPARAMS_swigregister
LCMSGAMMAPARAMS_swigregister(LCMSGAMMAPARAMS)

class GAMMATABLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GAMMATABLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GAMMATABLE, name)
    __swig_setmethods__["Seed"] = _lcms.GAMMATABLE_Seed_set
    __swig_getmethods__["Seed"] = _lcms.GAMMATABLE_Seed_get
    if _newclass:Seed = _swig_property(_lcms.GAMMATABLE_Seed_get, _lcms.GAMMATABLE_Seed_set)
    __swig_setmethods__["nEntries"] = _lcms.GAMMATABLE_nEntries_set
    __swig_getmethods__["nEntries"] = _lcms.GAMMATABLE_nEntries_get
    if _newclass:nEntries = _swig_property(_lcms.GAMMATABLE_nEntries_get, _lcms.GAMMATABLE_nEntries_set)
    __swig_setmethods__["GammaTable"] = _lcms.GAMMATABLE_GammaTable_set
    __swig_getmethods__["GammaTable"] = _lcms.GAMMATABLE_GammaTable_get
    if _newclass:GammaTable = _swig_property(_lcms.GAMMATABLE_GammaTable_get, _lcms.GAMMATABLE_GammaTable_set)
    def __init__(self, *args): 
        this = _lcms.new_GAMMATABLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_GAMMATABLE
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.GAMMATABLE___repr__(self)
    def __getitem__(self, *args): return _lcms.GAMMATABLE___getitem__(self, *args)
    def __setitem__(self, *args): return _lcms.GAMMATABLE___setitem__(self, *args)
GAMMATABLE_swigregister = _lcms.GAMMATABLE_swigregister
GAMMATABLE_swigregister(GAMMATABLE)

class VEC3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VEC3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VEC3, name)
    __swig_setmethods__["n"] = _lcms.VEC3_n_set
    __swig_getmethods__["n"] = _lcms.VEC3_n_get
    if _newclass:n = _swig_property(_lcms.VEC3_n_get, _lcms.VEC3_n_set)
    def __init__(self, vx = 0, vy = 0, vz = 0): 
        this = _lcms.new_VEC3(vx, vy, vz)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_VEC3
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _lcms.VEC3___getitem__(self, *args)
    def __setitem__(self, *args): return _lcms.VEC3___setitem__(self, *args)
    def __repr__(self): return _lcms.VEC3___repr__(self)
VEC3_swigregister = _lcms.VEC3_swigregister
VEC3_swigregister(VEC3)

class MAT3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MAT3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MAT3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _lcms.MAT3_v_set
    __swig_getmethods__["v"] = _lcms.MAT3_v_get
    if _newclass:v = _swig_property(_lcms.MAT3_v_get, _lcms.MAT3_v_set)
    def __init__(self): 
        this = _lcms.new_MAT3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_MAT3
    __del__ = lambda self : None;
MAT3_swigregister = _lcms.MAT3_swigregister
MAT3_swigregister(MAT3)

class cmsCIEXYZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIEXYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIEXYZ, name)
    __swig_setmethods__["X"] = _lcms.cmsCIEXYZ_X_set
    __swig_getmethods__["X"] = _lcms.cmsCIEXYZ_X_get
    if _newclass:X = _swig_property(_lcms.cmsCIEXYZ_X_get, _lcms.cmsCIEXYZ_X_set)
    __swig_setmethods__["Y"] = _lcms.cmsCIEXYZ_Y_set
    __swig_getmethods__["Y"] = _lcms.cmsCIEXYZ_Y_get
    if _newclass:Y = _swig_property(_lcms.cmsCIEXYZ_Y_get, _lcms.cmsCIEXYZ_Y_set)
    __swig_setmethods__["Z"] = _lcms.cmsCIEXYZ_Z_set
    __swig_getmethods__["Z"] = _lcms.cmsCIEXYZ_Z_get
    if _newclass:Z = _swig_property(_lcms.cmsCIEXYZ_Z_get, _lcms.cmsCIEXYZ_Z_set)
    def __init__(self, x = 0, y = 0, z = 0): 
        this = _lcms.new_cmsCIEXYZ(x, y, z)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsCIEXYZ
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsCIEXYZ___repr__(self)
cmsCIEXYZ_swigregister = _lcms.cmsCIEXYZ_swigregister
cmsCIEXYZ_swigregister(cmsCIEXYZ)

class cmsCIExyY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIExyY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIExyY, name)
    __swig_setmethods__["x"] = _lcms.cmsCIExyY_x_set
    __swig_getmethods__["x"] = _lcms.cmsCIExyY_x_get
    if _newclass:x = _swig_property(_lcms.cmsCIExyY_x_get, _lcms.cmsCIExyY_x_set)
    __swig_setmethods__["y"] = _lcms.cmsCIExyY_y_set
    __swig_getmethods__["y"] = _lcms.cmsCIExyY_y_get
    if _newclass:y = _swig_property(_lcms.cmsCIExyY_y_get, _lcms.cmsCIExyY_y_set)
    __swig_setmethods__["Y"] = _lcms.cmsCIExyY_Y_set
    __swig_getmethods__["Y"] = _lcms.cmsCIExyY_Y_get
    if _newclass:Y = _swig_property(_lcms.cmsCIExyY_Y_get, _lcms.cmsCIExyY_Y_set)
    def __init__(self, x = 0, y = 0, Y = 0): 
        this = _lcms.new_cmsCIExyY(x, y, Y)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsCIExyY
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsCIExyY___repr__(self)
cmsCIExyY_swigregister = _lcms.cmsCIExyY_swigregister
cmsCIExyY_swigregister(cmsCIExyY)

class cmsCIELab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIELab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIELab, name)
    __swig_setmethods__["L"] = _lcms.cmsCIELab_L_set
    __swig_getmethods__["L"] = _lcms.cmsCIELab_L_get
    if _newclass:L = _swig_property(_lcms.cmsCIELab_L_get, _lcms.cmsCIELab_L_set)
    __swig_setmethods__["a"] = _lcms.cmsCIELab_a_set
    __swig_getmethods__["a"] = _lcms.cmsCIELab_a_get
    if _newclass:a = _swig_property(_lcms.cmsCIELab_a_get, _lcms.cmsCIELab_a_set)
    __swig_setmethods__["b"] = _lcms.cmsCIELab_b_set
    __swig_getmethods__["b"] = _lcms.cmsCIELab_b_get
    if _newclass:b = _swig_property(_lcms.cmsCIELab_b_get, _lcms.cmsCIELab_b_set)
    def __init__(self, L = 0, a = 0, b = 0): 
        this = _lcms.new_cmsCIELab(L, a, b)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsCIELab
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsCIELab___repr__(self)
    def __cmp__(self, *args): return _lcms.cmsCIELab___cmp__(self, *args)
cmsCIELab_swigregister = _lcms.cmsCIELab_swigregister
cmsCIELab_swigregister(cmsCIELab)

class cmsCIELCh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIELCh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIELCh, name)
    __swig_setmethods__["L"] = _lcms.cmsCIELCh_L_set
    __swig_getmethods__["L"] = _lcms.cmsCIELCh_L_get
    if _newclass:L = _swig_property(_lcms.cmsCIELCh_L_get, _lcms.cmsCIELCh_L_set)
    __swig_setmethods__["C"] = _lcms.cmsCIELCh_C_set
    __swig_getmethods__["C"] = _lcms.cmsCIELCh_C_get
    if _newclass:C = _swig_property(_lcms.cmsCIELCh_C_get, _lcms.cmsCIELCh_C_set)
    __swig_setmethods__["h"] = _lcms.cmsCIELCh_h_set
    __swig_getmethods__["h"] = _lcms.cmsCIELCh_h_get
    if _newclass:h = _swig_property(_lcms.cmsCIELCh_h_get, _lcms.cmsCIELCh_h_set)
    def __init__(self, L = 0, C = 0, h = 0): 
        this = _lcms.new_cmsCIELCh(L, C, h)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsCIELCh
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsCIELCh___repr__(self)
cmsCIELCh_swigregister = _lcms.cmsCIELCh_swigregister
cmsCIELCh_swigregister(cmsCIELCh)

class cmsJCh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsJCh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsJCh, name)
    __swig_setmethods__["J"] = _lcms.cmsJCh_J_set
    __swig_getmethods__["J"] = _lcms.cmsJCh_J_get
    if _newclass:J = _swig_property(_lcms.cmsJCh_J_get, _lcms.cmsJCh_J_set)
    __swig_setmethods__["C"] = _lcms.cmsJCh_C_set
    __swig_getmethods__["C"] = _lcms.cmsJCh_C_get
    if _newclass:C = _swig_property(_lcms.cmsJCh_C_get, _lcms.cmsJCh_C_set)
    __swig_setmethods__["h"] = _lcms.cmsJCh_h_set
    __swig_getmethods__["h"] = _lcms.cmsJCh_h_get
    if _newclass:h = _swig_property(_lcms.cmsJCh_h_get, _lcms.cmsJCh_h_set)
    def __init__(self, J = 0, C = 0, h = 0): 
        this = _lcms.new_cmsJCh(J, C, h)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsJCh
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsJCh___repr__(self)
cmsJCh_swigregister = _lcms.cmsJCh_swigregister
cmsJCh_swigregister(cmsJCh)

class cmsCIEXYZTRIPLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIEXYZTRIPLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIEXYZTRIPLE, name)
    __swig_setmethods__["Red"] = _lcms.cmsCIEXYZTRIPLE_Red_set
    __swig_getmethods__["Red"] = _lcms.cmsCIEXYZTRIPLE_Red_get
    if _newclass:Red = _swig_property(_lcms.cmsCIEXYZTRIPLE_Red_get, _lcms.cmsCIEXYZTRIPLE_Red_set)
    __swig_setmethods__["Green"] = _lcms.cmsCIEXYZTRIPLE_Green_set
    __swig_getmethods__["Green"] = _lcms.cmsCIEXYZTRIPLE_Green_get
    if _newclass:Green = _swig_property(_lcms.cmsCIEXYZTRIPLE_Green_get, _lcms.cmsCIEXYZTRIPLE_Green_set)
    __swig_setmethods__["Blue"] = _lcms.cmsCIEXYZTRIPLE_Blue_set
    __swig_getmethods__["Blue"] = _lcms.cmsCIEXYZTRIPLE_Blue_get
    if _newclass:Blue = _swig_property(_lcms.cmsCIEXYZTRIPLE_Blue_get, _lcms.cmsCIEXYZTRIPLE_Blue_set)
    def __init__(self, *args): 
        this = _lcms.new_cmsCIEXYZTRIPLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsCIEXYZTRIPLE
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsCIEXYZTRIPLE___repr__(self)
cmsCIEXYZTRIPLE_swigregister = _lcms.cmsCIEXYZTRIPLE_swigregister
cmsCIEXYZTRIPLE_swigregister(cmsCIEXYZTRIPLE)

class cmsCIExyYTRIPLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIExyYTRIPLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIExyYTRIPLE, name)
    __swig_setmethods__["Red"] = _lcms.cmsCIExyYTRIPLE_Red_set
    __swig_getmethods__["Red"] = _lcms.cmsCIExyYTRIPLE_Red_get
    if _newclass:Red = _swig_property(_lcms.cmsCIExyYTRIPLE_Red_get, _lcms.cmsCIExyYTRIPLE_Red_set)
    __swig_setmethods__["Green"] = _lcms.cmsCIExyYTRIPLE_Green_set
    __swig_getmethods__["Green"] = _lcms.cmsCIExyYTRIPLE_Green_get
    if _newclass:Green = _swig_property(_lcms.cmsCIExyYTRIPLE_Green_get, _lcms.cmsCIExyYTRIPLE_Green_set)
    __swig_setmethods__["Blue"] = _lcms.cmsCIExyYTRIPLE_Blue_set
    __swig_getmethods__["Blue"] = _lcms.cmsCIExyYTRIPLE_Blue_get
    if _newclass:Blue = _swig_property(_lcms.cmsCIExyYTRIPLE_Blue_get, _lcms.cmsCIExyYTRIPLE_Blue_set)
    def __init__(self, *args): 
        this = _lcms.new_cmsCIExyYTRIPLE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsCIExyYTRIPLE
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsCIExyYTRIPLE___repr__(self)
cmsCIExyYTRIPLE_swigregister = _lcms.cmsCIExyYTRIPLE_swigregister
cmsCIExyYTRIPLE_swigregister(cmsCIExyYTRIPLE)

D50X = _lcms.D50X
D50Y = _lcms.D50Y
D50Z = _lcms.D50Z
PERCEPTUAL_BLACK_X = _lcms.PERCEPTUAL_BLACK_X
PERCEPTUAL_BLACK_Y = _lcms.PERCEPTUAL_BLACK_Y
PERCEPTUAL_BLACK_Z = _lcms.PERCEPTUAL_BLACK_Z

def cmsD50_XYZ():
  return _lcms.cmsD50_XYZ()
cmsD50_XYZ = _lcms.cmsD50_XYZ

def cmsD50_xyY():
  return _lcms.cmsD50_xyY()
cmsD50_xyY = _lcms.cmsD50_xyY

def cmsOpenProfileFromFile(*args):
  return _lcms.cmsOpenProfileFromFile(*args)
cmsOpenProfileFromFile = _lcms.cmsOpenProfileFromFile

def cmsOpenProfileFromMem(*args):
  return _lcms.cmsOpenProfileFromMem(*args)
cmsOpenProfileFromMem = _lcms.cmsOpenProfileFromMem

def cmsCloseProfile(*args):
  return _lcms.cmsCloseProfile(*args)
cmsCloseProfile = _lcms.cmsCloseProfile

def cmsCreateRGBProfile(*args):
  return _lcms.cmsCreateRGBProfile(*args)
cmsCreateRGBProfile = _lcms.cmsCreateRGBProfile

def cmsCreateGrayProfile(*args):
  return _lcms.cmsCreateGrayProfile(*args)
cmsCreateGrayProfile = _lcms.cmsCreateGrayProfile

def cmsCreateLinearizationDeviceLink(*args):
  return _lcms.cmsCreateLinearizationDeviceLink(*args)
cmsCreateLinearizationDeviceLink = _lcms.cmsCreateLinearizationDeviceLink

def cmsCreateInkLimitingDeviceLink(*args):
  return _lcms.cmsCreateInkLimitingDeviceLink(*args)
cmsCreateInkLimitingDeviceLink = _lcms.cmsCreateInkLimitingDeviceLink

def cmsCreateLabProfile(*args):
  return _lcms.cmsCreateLabProfile(*args)
cmsCreateLabProfile = _lcms.cmsCreateLabProfile

def cmsCreateLab4Profile(*args):
  return _lcms.cmsCreateLab4Profile(*args)
cmsCreateLab4Profile = _lcms.cmsCreateLab4Profile

def cmsCreateXYZProfile():
  return _lcms.cmsCreateXYZProfile()
cmsCreateXYZProfile = _lcms.cmsCreateXYZProfile

def cmsCreate_sRGBProfile():
  return _lcms.cmsCreate_sRGBProfile()
cmsCreate_sRGBProfile = _lcms.cmsCreate_sRGBProfile

def cmsCreateBCHSWabstractProfile(*args):
  return _lcms.cmsCreateBCHSWabstractProfile(*args)
cmsCreateBCHSWabstractProfile = _lcms.cmsCreateBCHSWabstractProfile

def cmsCreateNULLProfile():
  return _lcms.cmsCreateNULLProfile()
cmsCreateNULLProfile = _lcms.cmsCreateNULLProfile

def cmsXYZ2xyY(*args):
  return _lcms.cmsXYZ2xyY(*args)
cmsXYZ2xyY = _lcms.cmsXYZ2xyY

def cmsxyY2XYZ(*args):
  return _lcms.cmsxyY2XYZ(*args)
cmsxyY2XYZ = _lcms.cmsxyY2XYZ

def cmsXYZ2Lab(*args):
  return _lcms.cmsXYZ2Lab(*args)
cmsXYZ2Lab = _lcms.cmsXYZ2Lab

def cmsLab2XYZ(*args):
  return _lcms.cmsLab2XYZ(*args)
cmsLab2XYZ = _lcms.cmsLab2XYZ

def cmsLab2LCh(*args):
  return _lcms.cmsLab2LCh(*args)
cmsLab2LCh = _lcms.cmsLab2LCh

def cmsLCh2Lab(*args):
  return _lcms.cmsLCh2Lab(*args)
cmsLCh2Lab = _lcms.cmsLCh2Lab

def cmsDeltaE(*args):
  return _lcms.cmsDeltaE(*args)
cmsDeltaE = _lcms.cmsDeltaE

def cmsCIE94DeltaE(*args):
  return _lcms.cmsCIE94DeltaE(*args)
cmsCIE94DeltaE = _lcms.cmsCIE94DeltaE

def cmsBFDdeltaE(*args):
  return _lcms.cmsBFDdeltaE(*args)
cmsBFDdeltaE = _lcms.cmsBFDdeltaE

def cmsCMCdeltaE(*args):
  return _lcms.cmsCMCdeltaE(*args)
cmsCMCdeltaE = _lcms.cmsCMCdeltaE

def cmsCIE2000DeltaE(*args):
  return _lcms.cmsCIE2000DeltaE(*args)
cmsCIE2000DeltaE = _lcms.cmsCIE2000DeltaE

def cmsClampLab(*args):
  return _lcms.cmsClampLab(*args)
cmsClampLab = _lcms.cmsClampLab

def cmsWhitePointFromTemp(*args):
  return _lcms.cmsWhitePointFromTemp(*args)
cmsWhitePointFromTemp = _lcms.cmsWhitePointFromTemp

def cmsAdaptToIlluminant(*args):
  return _lcms.cmsAdaptToIlluminant(*args)
cmsAdaptToIlluminant = _lcms.cmsAdaptToIlluminant

def cmsBuildRGB2XYZtransferMatrix(*args):
  return _lcms.cmsBuildRGB2XYZtransferMatrix(*args)
cmsBuildRGB2XYZtransferMatrix = _lcms.cmsBuildRGB2XYZtransferMatrix
AVG_SURROUND_4 = _lcms.AVG_SURROUND_4
AVG_SURROUND = _lcms.AVG_SURROUND
DIM_SURROUND = _lcms.DIM_SURROUND
DARK_SURROUND = _lcms.DARK_SURROUND
CUTSHEET_SURROUND = _lcms.CUTSHEET_SURROUND
D_CALCULATE = _lcms.D_CALCULATE
D_CALCULATE_DISCOUNT = _lcms.D_CALCULATE_DISCOUNT
class cmsViewingConditions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsViewingConditions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsViewingConditions, name)
    __swig_setmethods__["whitePoint"] = _lcms.cmsViewingConditions_whitePoint_set
    __swig_getmethods__["whitePoint"] = _lcms.cmsViewingConditions_whitePoint_get
    if _newclass:whitePoint = _swig_property(_lcms.cmsViewingConditions_whitePoint_get, _lcms.cmsViewingConditions_whitePoint_set)
    __swig_setmethods__["Yb"] = _lcms.cmsViewingConditions_Yb_set
    __swig_getmethods__["Yb"] = _lcms.cmsViewingConditions_Yb_get
    if _newclass:Yb = _swig_property(_lcms.cmsViewingConditions_Yb_get, _lcms.cmsViewingConditions_Yb_set)
    __swig_setmethods__["La"] = _lcms.cmsViewingConditions_La_set
    __swig_getmethods__["La"] = _lcms.cmsViewingConditions_La_get
    if _newclass:La = _swig_property(_lcms.cmsViewingConditions_La_get, _lcms.cmsViewingConditions_La_set)
    __swig_setmethods__["surround"] = _lcms.cmsViewingConditions_surround_set
    __swig_getmethods__["surround"] = _lcms.cmsViewingConditions_surround_get
    if _newclass:surround = _swig_property(_lcms.cmsViewingConditions_surround_get, _lcms.cmsViewingConditions_surround_set)
    __swig_setmethods__["D_value"] = _lcms.cmsViewingConditions_D_value_set
    __swig_getmethods__["D_value"] = _lcms.cmsViewingConditions_D_value_get
    if _newclass:D_value = _swig_property(_lcms.cmsViewingConditions_D_value_get, _lcms.cmsViewingConditions_D_value_set)
    def __init__(self, *args): 
        this = _lcms.new_cmsViewingConditions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsViewingConditions
    __del__ = lambda self : None;
    def __repr__(self): return _lcms.cmsViewingConditions___repr__(self)
cmsViewingConditions_swigregister = _lcms.cmsViewingConditions_swigregister
cmsViewingConditions_swigregister(cmsViewingConditions)


def cmsCIECAM97sInit(*args):
  return _lcms.cmsCIECAM97sInit(*args)
cmsCIECAM97sInit = _lcms.cmsCIECAM97sInit

def cmsCIECAM97sDone(*args):
  return _lcms.cmsCIECAM97sDone(*args)
cmsCIECAM97sDone = _lcms.cmsCIECAM97sDone

def cmsCIECAM97sForward(*args):
  return _lcms.cmsCIECAM97sForward(*args)
cmsCIECAM97sForward = _lcms.cmsCIECAM97sForward

def cmsCIECAM97sReverse(*args):
  return _lcms.cmsCIECAM97sReverse(*args)
cmsCIECAM97sReverse = _lcms.cmsCIECAM97sReverse

def cmsCIECAM02Init(*args):
  return _lcms.cmsCIECAM02Init(*args)
cmsCIECAM02Init = _lcms.cmsCIECAM02Init

def cmsCIECAM02Done(*args):
  return _lcms.cmsCIECAM02Done(*args)
cmsCIECAM02Done = _lcms.cmsCIECAM02Done

def cmsCIECAM02Forward(*args):
  return _lcms.cmsCIECAM02Forward(*args)
cmsCIECAM02Forward = _lcms.cmsCIECAM02Forward

def cmsCIECAM02Reverse(*args):
  return _lcms.cmsCIECAM02Reverse(*args)
cmsCIECAM02Reverse = _lcms.cmsCIECAM02Reverse

def cmsBuildGamma(*args):
  return _lcms.cmsBuildGamma(*args)
cmsBuildGamma = _lcms.cmsBuildGamma

def cmsBuildParametricGamma(*args):
  return _lcms.cmsBuildParametricGamma(*args)
cmsBuildParametricGamma = _lcms.cmsBuildParametricGamma

def cmsAllocGamma(*args):
  return _lcms.cmsAllocGamma(*args)
cmsAllocGamma = _lcms.cmsAllocGamma

def cmsFreeGamma(*args):
  return _lcms.cmsFreeGamma(*args)
cmsFreeGamma = _lcms.cmsFreeGamma

def cmsFreeGammaTriple(*args):
  return _lcms.cmsFreeGammaTriple(*args)
cmsFreeGammaTriple = _lcms.cmsFreeGammaTriple

def cmsDupGamma(*args):
  return _lcms.cmsDupGamma(*args)
cmsDupGamma = _lcms.cmsDupGamma

def cmsReverseGamma(*args):
  return _lcms.cmsReverseGamma(*args)
cmsReverseGamma = _lcms.cmsReverseGamma

def cmsJoinGamma(*args):
  return _lcms.cmsJoinGamma(*args)
cmsJoinGamma = _lcms.cmsJoinGamma

def cmsJoinGammaEx(*args):
  return _lcms.cmsJoinGammaEx(*args)
cmsJoinGammaEx = _lcms.cmsJoinGammaEx

def cmsSmoothGamma(*args):
  return _lcms.cmsSmoothGamma(*args)
cmsSmoothGamma = _lcms.cmsSmoothGamma

def cmsEstimateGamma(*args):
  return _lcms.cmsEstimateGamma(*args)
cmsEstimateGamma = _lcms.cmsEstimateGamma

def cmsEstimateGammaEx(*args):
  return _lcms.cmsEstimateGammaEx(*args)
cmsEstimateGammaEx = _lcms.cmsEstimateGammaEx

def cmsReadICCGamma(*args):
  return _lcms.cmsReadICCGamma(*args)
cmsReadICCGamma = _lcms.cmsReadICCGamma

def cmsReadICCGammaReversed(*args):
  return _lcms.cmsReadICCGammaReversed(*args)
cmsReadICCGammaReversed = _lcms.cmsReadICCGammaReversed

def cmsTakeMediaWhitePoint(*args):
  return _lcms.cmsTakeMediaWhitePoint(*args)
cmsTakeMediaWhitePoint = _lcms.cmsTakeMediaWhitePoint

def cmsTakeMediaBlackPoint(*args):
  return _lcms.cmsTakeMediaBlackPoint(*args)
cmsTakeMediaBlackPoint = _lcms.cmsTakeMediaBlackPoint

def cmsTakeIluminant(*args):
  return _lcms.cmsTakeIluminant(*args)
cmsTakeIluminant = _lcms.cmsTakeIluminant

def cmsTakeColorants(*args):
  return _lcms.cmsTakeColorants(*args)
cmsTakeColorants = _lcms.cmsTakeColorants

def cmsTakeHeaderFlags(*args):
  return _lcms.cmsTakeHeaderFlags(*args)
cmsTakeHeaderFlags = _lcms.cmsTakeHeaderFlags

def cmsTakeHeaderAttributes(*args):
  return _lcms.cmsTakeHeaderAttributes(*args)
cmsTakeHeaderAttributes = _lcms.cmsTakeHeaderAttributes

def cmsSetLanguage(*args):
  return _lcms.cmsSetLanguage(*args)
cmsSetLanguage = _lcms.cmsSetLanguage

def cmsTakeProductName(*args):
  return _lcms.cmsTakeProductName(*args)
cmsTakeProductName = _lcms.cmsTakeProductName

def cmsTakeProductDesc(*args):
  return _lcms.cmsTakeProductDesc(*args)
cmsTakeProductDesc = _lcms.cmsTakeProductDesc

def cmsTakeProductInfo(*args):
  return _lcms.cmsTakeProductInfo(*args)
cmsTakeProductInfo = _lcms.cmsTakeProductInfo

def cmsTakeManufacturer(*args):
  return _lcms.cmsTakeManufacturer(*args)
cmsTakeManufacturer = _lcms.cmsTakeManufacturer

def cmsTakeModel(*args):
  return _lcms.cmsTakeModel(*args)
cmsTakeModel = _lcms.cmsTakeModel

def cmsTakeCopyright(*args):
  return _lcms.cmsTakeCopyright(*args)
cmsTakeCopyright = _lcms.cmsTakeCopyright

def cmsTakeProfileID(*args):
  return _lcms.cmsTakeProfileID(*args)
cmsTakeProfileID = _lcms.cmsTakeProfileID

def cmsTakeCreationDateTime(*args):
  return _lcms.cmsTakeCreationDateTime(*args)
cmsTakeCreationDateTime = _lcms.cmsTakeCreationDateTime

def cmsTakeCalibrationDateTime(*args):
  return _lcms.cmsTakeCalibrationDateTime(*args)
cmsTakeCalibrationDateTime = _lcms.cmsTakeCalibrationDateTime

def cmsIsTag(*args):
  return _lcms.cmsIsTag(*args)
cmsIsTag = _lcms.cmsIsTag

def cmsTakeRenderingIntent(*args):
  return _lcms.cmsTakeRenderingIntent(*args)
cmsTakeRenderingIntent = _lcms.cmsTakeRenderingIntent

def cmsTakeCharTargetData(*args):
  return _lcms.cmsTakeCharTargetData(*args)
cmsTakeCharTargetData = _lcms.cmsTakeCharTargetData

def cmsReadICCTextEx(*args):
  return _lcms.cmsReadICCTextEx(*args)
cmsReadICCTextEx = _lcms.cmsReadICCTextEx

def cmsReadICCText(*args):
  return _lcms.cmsReadICCText(*args)
cmsReadICCText = _lcms.cmsReadICCText
LCMS_DESC_MAX = _lcms.LCMS_DESC_MAX
class cmsPSEQDESC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPSEQDESC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPSEQDESC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceMfg"] = _lcms.cmsPSEQDESC_deviceMfg_set
    __swig_getmethods__["deviceMfg"] = _lcms.cmsPSEQDESC_deviceMfg_get
    if _newclass:deviceMfg = _swig_property(_lcms.cmsPSEQDESC_deviceMfg_get, _lcms.cmsPSEQDESC_deviceMfg_set)
    __swig_setmethods__["deviceModel"] = _lcms.cmsPSEQDESC_deviceModel_set
    __swig_getmethods__["deviceModel"] = _lcms.cmsPSEQDESC_deviceModel_get
    if _newclass:deviceModel = _swig_property(_lcms.cmsPSEQDESC_deviceModel_get, _lcms.cmsPSEQDESC_deviceModel_set)
    __swig_setmethods__["attributes"] = _lcms.cmsPSEQDESC_attributes_set
    __swig_getmethods__["attributes"] = _lcms.cmsPSEQDESC_attributes_get
    if _newclass:attributes = _swig_property(_lcms.cmsPSEQDESC_attributes_get, _lcms.cmsPSEQDESC_attributes_set)
    __swig_setmethods__["technology"] = _lcms.cmsPSEQDESC_technology_set
    __swig_getmethods__["technology"] = _lcms.cmsPSEQDESC_technology_get
    if _newclass:technology = _swig_property(_lcms.cmsPSEQDESC_technology_get, _lcms.cmsPSEQDESC_technology_set)
    __swig_setmethods__["Manufacturer"] = _lcms.cmsPSEQDESC_Manufacturer_set
    __swig_getmethods__["Manufacturer"] = _lcms.cmsPSEQDESC_Manufacturer_get
    if _newclass:Manufacturer = _swig_property(_lcms.cmsPSEQDESC_Manufacturer_get, _lcms.cmsPSEQDESC_Manufacturer_set)
    __swig_setmethods__["Model"] = _lcms.cmsPSEQDESC_Model_set
    __swig_getmethods__["Model"] = _lcms.cmsPSEQDESC_Model_get
    if _newclass:Model = _swig_property(_lcms.cmsPSEQDESC_Model_get, _lcms.cmsPSEQDESC_Model_set)
    def __init__(self): 
        this = _lcms.new_cmsPSEQDESC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsPSEQDESC
    __del__ = lambda self : None;
cmsPSEQDESC_swigregister = _lcms.cmsPSEQDESC_swigregister
cmsPSEQDESC_swigregister(cmsPSEQDESC)

class cmsSEQ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsSEQ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsSEQ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _lcms.cmsSEQ_n_set
    __swig_getmethods__["n"] = _lcms.cmsSEQ_n_get
    if _newclass:n = _swig_property(_lcms.cmsSEQ_n_get, _lcms.cmsSEQ_n_set)
    __swig_setmethods__["seq"] = _lcms.cmsSEQ_seq_set
    __swig_getmethods__["seq"] = _lcms.cmsSEQ_seq_get
    if _newclass:seq = _swig_property(_lcms.cmsSEQ_seq_get, _lcms.cmsSEQ_seq_set)
    def __init__(self): 
        this = _lcms.new_cmsSEQ()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsSEQ
    __del__ = lambda self : None;
cmsSEQ_swigregister = _lcms.cmsSEQ_swigregister
cmsSEQ_swigregister(cmsSEQ)


def cmsReadProfileSequenceDescription(*args):
  return _lcms.cmsReadProfileSequenceDescription(*args)
cmsReadProfileSequenceDescription = _lcms.cmsReadProfileSequenceDescription

def cmsFreeProfileSequenceDescription(*args):
  return _lcms.cmsFreeProfileSequenceDescription(*args)
cmsFreeProfileSequenceDescription = _lcms.cmsFreeProfileSequenceDescription

def _cmsICCcolorSpace(*args):
  return _lcms._cmsICCcolorSpace(*args)
_cmsICCcolorSpace = _lcms._cmsICCcolorSpace

def _cmsLCMScolorSpace(*args):
  return _lcms._cmsLCMScolorSpace(*args)
_cmsLCMScolorSpace = _lcms._cmsLCMScolorSpace

def _cmsChannelsOf(*args):
  return _lcms._cmsChannelsOf(*args)
_cmsChannelsOf = _lcms._cmsChannelsOf

def _cmsIsMatrixShaper(*args):
  return _lcms._cmsIsMatrixShaper(*args)
_cmsIsMatrixShaper = _lcms._cmsIsMatrixShaper
LCMS_USED_AS_INPUT = _lcms.LCMS_USED_AS_INPUT
LCMS_USED_AS_OUTPUT = _lcms.LCMS_USED_AS_OUTPUT
LCMS_USED_AS_PROOF = _lcms.LCMS_USED_AS_PROOF

def cmsIsIntentSupported(*args):
  return _lcms.cmsIsIntentSupported(*args)
cmsIsIntentSupported = _lcms.cmsIsIntentSupported

def cmsGetPCS(*args):
  return _lcms.cmsGetPCS(*args)
cmsGetPCS = _lcms.cmsGetPCS

def cmsGetColorSpace(*args):
  return _lcms.cmsGetColorSpace(*args)
cmsGetColorSpace = _lcms.cmsGetColorSpace

def cmsGetDeviceClass(*args):
  return _lcms.cmsGetDeviceClass(*args)
cmsGetDeviceClass = _lcms.cmsGetDeviceClass

def cmsGetProfileICCversion(*args):
  return _lcms.cmsGetProfileICCversion(*args)
cmsGetProfileICCversion = _lcms.cmsGetProfileICCversion

def cmsSetProfileICCversion(*args):
  return _lcms.cmsSetProfileICCversion(*args)
cmsSetProfileICCversion = _lcms.cmsSetProfileICCversion

def cmsGetTagCount(*args):
  return _lcms.cmsGetTagCount(*args)
cmsGetTagCount = _lcms.cmsGetTagCount

def cmsGetTagSignature(*args):
  return _lcms.cmsGetTagSignature(*args)
cmsGetTagSignature = _lcms.cmsGetTagSignature

def cmsSetDeviceClass(*args):
  return _lcms.cmsSetDeviceClass(*args)
cmsSetDeviceClass = _lcms.cmsSetDeviceClass

def cmsSetColorSpace(*args):
  return _lcms.cmsSetColorSpace(*args)
cmsSetColorSpace = _lcms.cmsSetColorSpace

def cmsSetPCS(*args):
  return _lcms.cmsSetPCS(*args)
cmsSetPCS = _lcms.cmsSetPCS

def cmsSetRenderingIntent(*args):
  return _lcms.cmsSetRenderingIntent(*args)
cmsSetRenderingIntent = _lcms.cmsSetRenderingIntent

def cmsSetHeaderFlags(*args):
  return _lcms.cmsSetHeaderFlags(*args)
cmsSetHeaderFlags = _lcms.cmsSetHeaderFlags

def cmsSetHeaderAttributes(*args):
  return _lcms.cmsSetHeaderAttributes(*args)
cmsSetHeaderAttributes = _lcms.cmsSetHeaderAttributes

def cmsSetProfileID(*args):
  return _lcms.cmsSetProfileID(*args)
cmsSetProfileID = _lcms.cmsSetProfileID
INTENT_PERCEPTUAL = _lcms.INTENT_PERCEPTUAL
INTENT_RELATIVE_COLORIMETRIC = _lcms.INTENT_RELATIVE_COLORIMETRIC
INTENT_SATURATION = _lcms.INTENT_SATURATION
INTENT_ABSOLUTE_COLORIMETRIC = _lcms.INTENT_ABSOLUTE_COLORIMETRIC
cmsFLAGS_MATRIXINPUT = _lcms.cmsFLAGS_MATRIXINPUT
cmsFLAGS_MATRIXOUTPUT = _lcms.cmsFLAGS_MATRIXOUTPUT
cmsFLAGS_MATRIXONLY = _lcms.cmsFLAGS_MATRIXONLY
cmsFLAGS_NOWHITEONWHITEFIXUP = _lcms.cmsFLAGS_NOWHITEONWHITEFIXUP
cmsFLAGS_NOPRELINEARIZATION = _lcms.cmsFLAGS_NOPRELINEARIZATION
cmsFLAGS_GUESSDEVICECLASS = _lcms.cmsFLAGS_GUESSDEVICECLASS
cmsFLAGS_NOTCACHE = _lcms.cmsFLAGS_NOTCACHE
cmsFLAGS_NOTPRECALC = _lcms.cmsFLAGS_NOTPRECALC
cmsFLAGS_NULLTRANSFORM = _lcms.cmsFLAGS_NULLTRANSFORM
cmsFLAGS_HIGHRESPRECALC = _lcms.cmsFLAGS_HIGHRESPRECALC
cmsFLAGS_LOWRESPRECALC = _lcms.cmsFLAGS_LOWRESPRECALC
cmsFLAGS_WHITEBLACKCOMPENSATION = _lcms.cmsFLAGS_WHITEBLACKCOMPENSATION
cmsFLAGS_BLACKPOINTCOMPENSATION = _lcms.cmsFLAGS_BLACKPOINTCOMPENSATION
cmsFLAGS_GAMUTCHECK = _lcms.cmsFLAGS_GAMUTCHECK
cmsFLAGS_SOFTPROOFING = _lcms.cmsFLAGS_SOFTPROOFING
cmsFLAGS_PRESERVEBLACK = _lcms.cmsFLAGS_PRESERVEBLACK
cmsFLAGS_NODEFAULTRESOURCEDEF = _lcms.cmsFLAGS_NODEFAULTRESOURCEDEF

def cmsCreateTransform(*args):
  return _lcms.cmsCreateTransform(*args)
cmsCreateTransform = _lcms.cmsCreateTransform

def cmsCreateProofingTransform(*args):
  return _lcms.cmsCreateProofingTransform(*args)
cmsCreateProofingTransform = _lcms.cmsCreateProofingTransform

def cmsCreateMultiprofileTransform(*args):
  return _lcms.cmsCreateMultiprofileTransform(*args)
cmsCreateMultiprofileTransform = _lcms.cmsCreateMultiprofileTransform

def cmsDeleteTransform(*args):
  return _lcms.cmsDeleteTransform(*args)
cmsDeleteTransform = _lcms.cmsDeleteTransform

def cmsDoTransform(*args):
  return _lcms.cmsDoTransform(*args)
cmsDoTransform = _lcms.cmsDoTransform

def cmsChangeBuffersFormat(*args):
  return _lcms.cmsChangeBuffersFormat(*args)
cmsChangeBuffersFormat = _lcms.cmsChangeBuffersFormat

def cmsSetAlarmCodes(*args):
  return _lcms.cmsSetAlarmCodes(*args)
cmsSetAlarmCodes = _lcms.cmsSetAlarmCodes

def cmsGetAlarmCodes(*args):
  return _lcms.cmsGetAlarmCodes(*args)
cmsGetAlarmCodes = _lcms.cmsGetAlarmCodes

def cmsSetAdaptationState(*args):
  return _lcms.cmsSetAdaptationState(*args)
cmsSetAdaptationState = _lcms.cmsSetAdaptationState
LCMS_PRESERVE_PURE_K = _lcms.LCMS_PRESERVE_PURE_K
LCMS_PRESERVE_K_PLANE = _lcms.LCMS_PRESERVE_K_PLANE

def cmsSetCMYKPreservationStrategy(*args):
  return _lcms.cmsSetCMYKPreservationStrategy(*args)
cmsSetCMYKPreservationStrategy = _lcms.cmsSetCMYKPreservationStrategy
class cmsNAMEDCOLOR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsNAMEDCOLOR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsNAMEDCOLOR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _lcms.cmsNAMEDCOLOR_Name_set
    __swig_getmethods__["Name"] = _lcms.cmsNAMEDCOLOR_Name_get
    if _newclass:Name = _swig_property(_lcms.cmsNAMEDCOLOR_Name_get, _lcms.cmsNAMEDCOLOR_Name_set)
    __swig_setmethods__["PCS"] = _lcms.cmsNAMEDCOLOR_PCS_set
    __swig_getmethods__["PCS"] = _lcms.cmsNAMEDCOLOR_PCS_get
    if _newclass:PCS = _swig_property(_lcms.cmsNAMEDCOLOR_PCS_get, _lcms.cmsNAMEDCOLOR_PCS_set)
    __swig_setmethods__["DeviceColorant"] = _lcms.cmsNAMEDCOLOR_DeviceColorant_set
    __swig_getmethods__["DeviceColorant"] = _lcms.cmsNAMEDCOLOR_DeviceColorant_get
    if _newclass:DeviceColorant = _swig_property(_lcms.cmsNAMEDCOLOR_DeviceColorant_get, _lcms.cmsNAMEDCOLOR_DeviceColorant_set)
    def __init__(self): 
        this = _lcms.new_cmsNAMEDCOLOR()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsNAMEDCOLOR
    __del__ = lambda self : None;
cmsNAMEDCOLOR_swigregister = _lcms.cmsNAMEDCOLOR_swigregister
cmsNAMEDCOLOR_swigregister(cmsNAMEDCOLOR)

class cmsNAMEDCOLORLIST(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsNAMEDCOLORLIST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsNAMEDCOLORLIST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nColors"] = _lcms.cmsNAMEDCOLORLIST_nColors_set
    __swig_getmethods__["nColors"] = _lcms.cmsNAMEDCOLORLIST_nColors_get
    if _newclass:nColors = _swig_property(_lcms.cmsNAMEDCOLORLIST_nColors_get, _lcms.cmsNAMEDCOLORLIST_nColors_set)
    __swig_setmethods__["Allocated"] = _lcms.cmsNAMEDCOLORLIST_Allocated_set
    __swig_getmethods__["Allocated"] = _lcms.cmsNAMEDCOLORLIST_Allocated_get
    if _newclass:Allocated = _swig_property(_lcms.cmsNAMEDCOLORLIST_Allocated_get, _lcms.cmsNAMEDCOLORLIST_Allocated_set)
    __swig_setmethods__["ColorantCount"] = _lcms.cmsNAMEDCOLORLIST_ColorantCount_set
    __swig_getmethods__["ColorantCount"] = _lcms.cmsNAMEDCOLORLIST_ColorantCount_get
    if _newclass:ColorantCount = _swig_property(_lcms.cmsNAMEDCOLORLIST_ColorantCount_get, _lcms.cmsNAMEDCOLORLIST_ColorantCount_set)
    __swig_setmethods__["Prefix"] = _lcms.cmsNAMEDCOLORLIST_Prefix_set
    __swig_getmethods__["Prefix"] = _lcms.cmsNAMEDCOLORLIST_Prefix_get
    if _newclass:Prefix = _swig_property(_lcms.cmsNAMEDCOLORLIST_Prefix_get, _lcms.cmsNAMEDCOLORLIST_Prefix_set)
    __swig_setmethods__["Suffix"] = _lcms.cmsNAMEDCOLORLIST_Suffix_set
    __swig_getmethods__["Suffix"] = _lcms.cmsNAMEDCOLORLIST_Suffix_get
    if _newclass:Suffix = _swig_property(_lcms.cmsNAMEDCOLORLIST_Suffix_get, _lcms.cmsNAMEDCOLORLIST_Suffix_set)
    __swig_setmethods__["List"] = _lcms.cmsNAMEDCOLORLIST_List_set
    __swig_getmethods__["List"] = _lcms.cmsNAMEDCOLORLIST_List_get
    if _newclass:List = _swig_property(_lcms.cmsNAMEDCOLORLIST_List_get, _lcms.cmsNAMEDCOLORLIST_List_set)
    def __init__(self): 
        this = _lcms.new_cmsNAMEDCOLORLIST()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_cmsNAMEDCOLORLIST
    __del__ = lambda self : None;
cmsNAMEDCOLORLIST_swigregister = _lcms.cmsNAMEDCOLORLIST_swigregister
cmsNAMEDCOLORLIST_swigregister(cmsNAMEDCOLORLIST)


def cmsNamedColorCount(*args):
  return _lcms.cmsNamedColorCount(*args)
cmsNamedColorCount = _lcms.cmsNamedColorCount

def cmsNamedColorInfo(*args):
  return _lcms.cmsNamedColorInfo(*args)
cmsNamedColorInfo = _lcms.cmsNamedColorInfo

def cmsNamedColorIndex(*args):
  return _lcms.cmsNamedColorIndex(*args)
cmsNamedColorIndex = _lcms.cmsNamedColorIndex

def cmsReadColorantTable(*args):
  return _lcms.cmsReadColorantTable(*args)
cmsReadColorantTable = _lcms.cmsReadColorantTable

def cmsAddTag(*args):
  return _lcms.cmsAddTag(*args)
cmsAddTag = _lcms.cmsAddTag

def cmsTransform2DeviceLink(*args):
  return _lcms.cmsTransform2DeviceLink(*args)
cmsTransform2DeviceLink = _lcms.cmsTransform2DeviceLink

def _cmsSetLUTdepth(*args):
  return _lcms._cmsSetLUTdepth(*args)
_cmsSetLUTdepth = _lcms._cmsSetLUTdepth

def cmsSaveProfile(*args):
  return _lcms.cmsSaveProfile(*args)
cmsSaveProfile = _lcms.cmsSaveProfile

def _cmsSaveProfileToMem(*args):
  return _lcms._cmsSaveProfileToMem(*args)
_cmsSaveProfileToMem = _lcms._cmsSaveProfileToMem

def cmsGetPostScriptCSA(*args):
  return _lcms.cmsGetPostScriptCSA(*args)
cmsGetPostScriptCSA = _lcms.cmsGetPostScriptCSA

def cmsGetPostScriptCRD(*args):
  return _lcms.cmsGetPostScriptCRD(*args)
cmsGetPostScriptCRD = _lcms.cmsGetPostScriptCRD

def cmsGetPostScriptCRDEx(*args):
  return _lcms.cmsGetPostScriptCRDEx(*args)
cmsGetPostScriptCRDEx = _lcms.cmsGetPostScriptCRDEx
LCMS_ERROR_ABORT = _lcms.LCMS_ERROR_ABORT
LCMS_ERROR_SHOW = _lcms.LCMS_ERROR_SHOW
LCMS_ERROR_IGNORE = _lcms.LCMS_ERROR_IGNORE

def cmsErrorAction(*args):
  return _lcms.cmsErrorAction(*args)
cmsErrorAction = _lcms.cmsErrorAction
LCMS_ERRC_WARNING = _lcms.LCMS_ERRC_WARNING
LCMS_ERRC_RECOVERABLE = _lcms.LCMS_ERRC_RECOVERABLE
LCMS_ERRC_ABORTED = _lcms.LCMS_ERRC_ABORTED

def cmsSetErrorHandler(*args):
  return _lcms.cmsSetErrorHandler(*args)
cmsSetErrorHandler = _lcms.cmsSetErrorHandler

def cmsAllocLUT():
  return _lcms.cmsAllocLUT()
cmsAllocLUT = _lcms.cmsAllocLUT

def cmsAllocLinearTable(*args):
  return _lcms.cmsAllocLinearTable(*args)
cmsAllocLinearTable = _lcms.cmsAllocLinearTable

def cmsAlloc3DGrid(*args):
  return _lcms.cmsAlloc3DGrid(*args)
cmsAlloc3DGrid = _lcms.cmsAlloc3DGrid

def cmsSetMatrixLUT(*args):
  return _lcms.cmsSetMatrixLUT(*args)
cmsSetMatrixLUT = _lcms.cmsSetMatrixLUT

def cmsSetMatrixLUT4(*args):
  return _lcms.cmsSetMatrixLUT4(*args)
cmsSetMatrixLUT4 = _lcms.cmsSetMatrixLUT4

def cmsFreeLUT(*args):
  return _lcms.cmsFreeLUT(*args)
cmsFreeLUT = _lcms.cmsFreeLUT

def cmsEvalLUT(*args):
  return _lcms.cmsEvalLUT(*args)
cmsEvalLUT = _lcms.cmsEvalLUT

def cmsEvalLUTreverse(*args):
  return _lcms.cmsEvalLUTreverse(*args)
cmsEvalLUTreverse = _lcms.cmsEvalLUTreverse

def cmsReadICCLut(*args):
  return _lcms.cmsReadICCLut(*args)
cmsReadICCLut = _lcms.cmsReadICCLut

def cmsDupLUT(*args):
  return _lcms.cmsDupLUT(*args)
cmsDupLUT = _lcms.cmsDupLUT
SAMPLER_INSPECT = _lcms.SAMPLER_INSPECT

def cmsSample3DGrid(*args):
  return _lcms.cmsSample3DGrid(*args)
cmsSample3DGrid = _lcms.cmsSample3DGrid

def cmsSetUserFormatters(*args):
  return _lcms.cmsSetUserFormatters(*args)
cmsSetUserFormatters = _lcms.cmsSetUserFormatters

def cmsGetUserFormatters(*args):
  return _lcms.cmsGetUserFormatters(*args)
cmsGetUserFormatters = _lcms.cmsGetUserFormatters

def cmsIT8Alloc():
  return _lcms.cmsIT8Alloc()
cmsIT8Alloc = _lcms.cmsIT8Alloc

def cmsIT8Free(*args):
  return _lcms.cmsIT8Free(*args)
cmsIT8Free = _lcms.cmsIT8Free

def cmsIT8TableCount(*args):
  return _lcms.cmsIT8TableCount(*args)
cmsIT8TableCount = _lcms.cmsIT8TableCount

def cmsIT8SetTable(*args):
  return _lcms.cmsIT8SetTable(*args)
cmsIT8SetTable = _lcms.cmsIT8SetTable

def cmsIT8LoadFromFile(*args):
  return _lcms.cmsIT8LoadFromFile(*args)
cmsIT8LoadFromFile = _lcms.cmsIT8LoadFromFile

def cmsIT8LoadFromMem(*args):
  return _lcms.cmsIT8LoadFromMem(*args)
cmsIT8LoadFromMem = _lcms.cmsIT8LoadFromMem

def cmsIT8SaveToFile(*args):
  return _lcms.cmsIT8SaveToFile(*args)
cmsIT8SaveToFile = _lcms.cmsIT8SaveToFile

def cmsIT8SaveToMem(*args):
  return _lcms.cmsIT8SaveToMem(*args)
cmsIT8SaveToMem = _lcms.cmsIT8SaveToMem

def cmsIT8GetSheetType(*args):
  return _lcms.cmsIT8GetSheetType(*args)
cmsIT8GetSheetType = _lcms.cmsIT8GetSheetType

def cmsIT8SetSheetType(*args):
  return _lcms.cmsIT8SetSheetType(*args)
cmsIT8SetSheetType = _lcms.cmsIT8SetSheetType

def cmsIT8SetComment(*args):
  return _lcms.cmsIT8SetComment(*args)
cmsIT8SetComment = _lcms.cmsIT8SetComment

def cmsIT8SetPropertyStr(*args):
  return _lcms.cmsIT8SetPropertyStr(*args)
cmsIT8SetPropertyStr = _lcms.cmsIT8SetPropertyStr

def cmsIT8SetPropertyDbl(*args):
  return _lcms.cmsIT8SetPropertyDbl(*args)
cmsIT8SetPropertyDbl = _lcms.cmsIT8SetPropertyDbl

def cmsIT8SetPropertyHex(*args):
  return _lcms.cmsIT8SetPropertyHex(*args)
cmsIT8SetPropertyHex = _lcms.cmsIT8SetPropertyHex

def cmsIT8SetPropertyMulti(*args):
  return _lcms.cmsIT8SetPropertyMulti(*args)
cmsIT8SetPropertyMulti = _lcms.cmsIT8SetPropertyMulti

def cmsIT8SetPropertyUncooked(*args):
  return _lcms.cmsIT8SetPropertyUncooked(*args)
cmsIT8SetPropertyUncooked = _lcms.cmsIT8SetPropertyUncooked

def cmsIT8GetProperty(*args):
  return _lcms.cmsIT8GetProperty(*args)
cmsIT8GetProperty = _lcms.cmsIT8GetProperty

def cmsIT8GetPropertyDbl(*args):
  return _lcms.cmsIT8GetPropertyDbl(*args)
cmsIT8GetPropertyDbl = _lcms.cmsIT8GetPropertyDbl

def cmsIT8GetPropertyMulti(*args):
  return _lcms.cmsIT8GetPropertyMulti(*args)
cmsIT8GetPropertyMulti = _lcms.cmsIT8GetPropertyMulti

def cmsIT8EnumProperties(*args):
  return _lcms.cmsIT8EnumProperties(*args)
cmsIT8EnumProperties = _lcms.cmsIT8EnumProperties

def cmsIT8EnumPropertyMulti(*args):
  return _lcms.cmsIT8EnumPropertyMulti(*args)
cmsIT8EnumPropertyMulti = _lcms.cmsIT8EnumPropertyMulti

def cmsIT8GetDataRowCol(*args):
  return _lcms.cmsIT8GetDataRowCol(*args)
cmsIT8GetDataRowCol = _lcms.cmsIT8GetDataRowCol

def cmsIT8GetDataRowColDbl(*args):
  return _lcms.cmsIT8GetDataRowColDbl(*args)
cmsIT8GetDataRowColDbl = _lcms.cmsIT8GetDataRowColDbl

def cmsIT8SetDataRowCol(*args):
  return _lcms.cmsIT8SetDataRowCol(*args)
cmsIT8SetDataRowCol = _lcms.cmsIT8SetDataRowCol

def cmsIT8SetDataRowColDbl(*args):
  return _lcms.cmsIT8SetDataRowColDbl(*args)
cmsIT8SetDataRowColDbl = _lcms.cmsIT8SetDataRowColDbl

def cmsIT8GetData(*args):
  return _lcms.cmsIT8GetData(*args)
cmsIT8GetData = _lcms.cmsIT8GetData

def cmsIT8GetDataDbl(*args):
  return _lcms.cmsIT8GetDataDbl(*args)
cmsIT8GetDataDbl = _lcms.cmsIT8GetDataDbl

def cmsIT8SetData(*args):
  return _lcms.cmsIT8SetData(*args)
cmsIT8SetData = _lcms.cmsIT8SetData

def cmsIT8SetDataDbl(*args):
  return _lcms.cmsIT8SetDataDbl(*args)
cmsIT8SetDataDbl = _lcms.cmsIT8SetDataDbl

def cmsIT8GetDataFormat(*args):
  return _lcms.cmsIT8GetDataFormat(*args)
cmsIT8GetDataFormat = _lcms.cmsIT8GetDataFormat

def cmsIT8SetDataFormat(*args):
  return _lcms.cmsIT8SetDataFormat(*args)
cmsIT8SetDataFormat = _lcms.cmsIT8SetDataFormat

def cmsIT8EnumDataFormat(*args):
  return _lcms.cmsIT8EnumDataFormat(*args)
cmsIT8EnumDataFormat = _lcms.cmsIT8EnumDataFormat

def cmsIT8GetPatchName(*args):
  return _lcms.cmsIT8GetPatchName(*args)
cmsIT8GetPatchName = _lcms.cmsIT8GetPatchName

def cmsIT8GetPatchByName(*args):
  return _lcms.cmsIT8GetPatchByName(*args)
cmsIT8GetPatchByName = _lcms.cmsIT8GetPatchByName

def cmsIT8SetTableByLabel(*args):
  return _lcms.cmsIT8SetTableByLabel(*args)
cmsIT8SetTableByLabel = _lcms.cmsIT8SetTableByLabel

def cmsIT8SetIndexColumn(*args):
  return _lcms.cmsIT8SetIndexColumn(*args)
cmsIT8SetIndexColumn = _lcms.cmsIT8SetIndexColumn

def cmsIT8DefineDblFormat(*args):
  return _lcms.cmsIT8DefineDblFormat(*args)
cmsIT8DefineDblFormat = _lcms.cmsIT8DefineDblFormat

def cmsLabEncoded2Float(*args):
  return _lcms.cmsLabEncoded2Float(*args)
cmsLabEncoded2Float = _lcms.cmsLabEncoded2Float

def cmsLabEncoded2Float4(*args):
  return _lcms.cmsLabEncoded2Float4(*args)
cmsLabEncoded2Float4 = _lcms.cmsLabEncoded2Float4

def cmsFloat2LabEncoded(*args):
  return _lcms.cmsFloat2LabEncoded(*args)
cmsFloat2LabEncoded = _lcms.cmsFloat2LabEncoded

def cmsFloat2LabEncoded4(*args):
  return _lcms.cmsFloat2LabEncoded4(*args)
cmsFloat2LabEncoded4 = _lcms.cmsFloat2LabEncoded4

def cmsXYZEncoded2Float(*args):
  return _lcms.cmsXYZEncoded2Float(*args)
cmsXYZEncoded2Float = _lcms.cmsXYZEncoded2Float

def cmsFloat2XYZEncoded(*args):
  return _lcms.cmsFloat2XYZEncoded(*args)
cmsFloat2XYZEncoded = _lcms.cmsFloat2XYZEncoded

def _cmsAddTextTag(*args):
  return _lcms._cmsAddTextTag(*args)
_cmsAddTextTag = _lcms._cmsAddTextTag

def _cmsAddXYZTag(*args):
  return _lcms._cmsAddXYZTag(*args)
_cmsAddXYZTag = _lcms._cmsAddXYZTag

def _cmsAddLUTTag(*args):
  return _lcms._cmsAddLUTTag(*args)
_cmsAddLUTTag = _lcms._cmsAddLUTTag

def _cmsAddGammaTag(*args):
  return _lcms._cmsAddGammaTag(*args)
_cmsAddGammaTag = _lcms._cmsAddGammaTag

def _cmsAddChromaticityTag(*args):
  return _lcms._cmsAddChromaticityTag(*args)
_cmsAddChromaticityTag = _lcms._cmsAddChromaticityTag

def _cmsAddSequenceDescriptionTag(*args):
  return _lcms._cmsAddSequenceDescriptionTag(*args)
_cmsAddSequenceDescriptionTag = _lcms._cmsAddSequenceDescriptionTag

def _cmsAddNamedColorTag(*args):
  return _lcms._cmsAddNamedColorTag(*args)
_cmsAddNamedColorTag = _lcms._cmsAddNamedColorTag

def _cmsAddDateTimeTag(*args):
  return _lcms._cmsAddDateTimeTag(*args)
_cmsAddDateTimeTag = _lcms._cmsAddDateTimeTag

def _cmsAddColorantTableTag(*args):
  return _lcms._cmsAddColorantTableTag(*args)
_cmsAddColorantTableTag = _lcms._cmsAddColorantTableTag

def _cmsAddChromaticAdaptationTag(*args):
  return _lcms._cmsAddChromaticAdaptationTag(*args)
_cmsAddChromaticAdaptationTag = _lcms._cmsAddChromaticAdaptationTag

def _cmsQuickFloor(*args):
  return _lcms._cmsQuickFloor(*args)
_cmsQuickFloor = _lcms._cmsQuickFloor

def _cmsClampWord(*args):
  return _lcms._cmsClampWord(*args)
_cmsClampWord = _lcms._cmsClampWord

def _cmsMalloc(*args):
  return _lcms._cmsMalloc(*args)
_cmsMalloc = _lcms._cmsMalloc

def _cmsCalloc(*args):
  return _lcms._cmsCalloc(*args)
_cmsCalloc = _lcms._cmsCalloc

def _cmsFree(*args):
  return _lcms._cmsFree(*args)
_cmsFree = _lcms._cmsFree

def cmsSignalError(*args):
  return _lcms.cmsSignalError(*args)
cmsSignalError = _lcms.cmsSignalError
class _cmsTestAlign16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsTestAlign16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsTestAlign16, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _lcms._cmsTestAlign16_a_set
    __swig_getmethods__["a"] = _lcms._cmsTestAlign16_a_get
    if _newclass:a = _swig_property(_lcms._cmsTestAlign16_a_get, _lcms._cmsTestAlign16_a_set)
    __swig_setmethods__["b"] = _lcms._cmsTestAlign16_b_set
    __swig_getmethods__["b"] = _lcms._cmsTestAlign16_b_get
    if _newclass:b = _swig_property(_lcms._cmsTestAlign16_b_get, _lcms._cmsTestAlign16_b_set)
    def __init__(self): 
        this = _lcms.new__cmsTestAlign16()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete__cmsTestAlign16
    __del__ = lambda self : None;
_cmsTestAlign16_swigregister = _lcms._cmsTestAlign16_swigregister
_cmsTestAlign16_swigregister(_cmsTestAlign16)

class _cmsTestAlign8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsTestAlign8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsTestAlign8, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _lcms._cmsTestAlign8_a_set
    __swig_getmethods__["a"] = _lcms._cmsTestAlign8_a_get
    if _newclass:a = _swig_property(_lcms._cmsTestAlign8_a_get, _lcms._cmsTestAlign8_a_set)
    __swig_setmethods__["b"] = _lcms._cmsTestAlign8_b_set
    __swig_getmethods__["b"] = _lcms._cmsTestAlign8_b_get
    if _newclass:b = _swig_property(_lcms._cmsTestAlign8_b_get, _lcms._cmsTestAlign8_b_set)
    def __init__(self): 
        this = _lcms.new__cmsTestAlign8()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete__cmsTestAlign8
    __del__ = lambda self : None;
_cmsTestAlign8_swigregister = _lcms._cmsTestAlign8_swigregister
_cmsTestAlign8_swigregister(_cmsTestAlign8)


def FixedMul(*args):
  return _lcms.FixedMul(*args)
FixedMul = _lcms.FixedMul

def FixedSquare(*args):
  return _lcms.FixedSquare(*args)
FixedSquare = _lcms.FixedSquare

def ToFixedDomain(*args):
  return _lcms.ToFixedDomain(*args)
ToFixedDomain = _lcms.ToFixedDomain

def FromFixedDomain(*args):
  return _lcms.FromFixedDomain(*args)
FromFixedDomain = _lcms.FromFixedDomain

def FixedLERP(*args):
  return _lcms.FixedLERP(*args)
FixedLERP = _lcms.FixedLERP

def FixedScale(*args):
  return _lcms.FixedScale(*args)
FixedScale = _lcms.FixedScale
VX = _lcms.VX
VY = _lcms.VY
VZ = _lcms.VZ
class WVEC3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WVEC3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WVEC3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _lcms.WVEC3_n_set
    __swig_getmethods__["n"] = _lcms.WVEC3_n_get
    if _newclass:n = _swig_property(_lcms.WVEC3_n_get, _lcms.WVEC3_n_set)
    def __init__(self): 
        this = _lcms.new_WVEC3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_WVEC3
    __del__ = lambda self : None;
WVEC3_swigregister = _lcms.WVEC3_swigregister
WVEC3_swigregister(WVEC3)

class WMAT3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WMAT3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WMAT3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _lcms.WMAT3_v_set
    __swig_getmethods__["v"] = _lcms.WMAT3_v_get
    if _newclass:v = _swig_property(_lcms.WMAT3_v_get, _lcms.WMAT3_v_set)
    def __init__(self): 
        this = _lcms.new_WMAT3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_WMAT3
    __del__ = lambda self : None;
WMAT3_swigregister = _lcms.WMAT3_swigregister
WMAT3_swigregister(WMAT3)


def VEC3init(*args):
  return _lcms.VEC3init(*args)
VEC3init = _lcms.VEC3init

def VEC3initF(*args):
  return _lcms.VEC3initF(*args)
VEC3initF = _lcms.VEC3initF

def VEC3toFix(*args):
  return _lcms.VEC3toFix(*args)
VEC3toFix = _lcms.VEC3toFix

def VEC3fromFix(*args):
  return _lcms.VEC3fromFix(*args)
VEC3fromFix = _lcms.VEC3fromFix

def VEC3scaleFix(*args):
  return _lcms.VEC3scaleFix(*args)
VEC3scaleFix = _lcms.VEC3scaleFix

def VEC3swap(*args):
  return _lcms.VEC3swap(*args)
VEC3swap = _lcms.VEC3swap

def VEC3divK(*args):
  return _lcms.VEC3divK(*args)
VEC3divK = _lcms.VEC3divK

def VEC3perK(*args):
  return _lcms.VEC3perK(*args)
VEC3perK = _lcms.VEC3perK

def VEC3minus(*args):
  return _lcms.VEC3minus(*args)
VEC3minus = _lcms.VEC3minus

def VEC3perComp(*args):
  return _lcms.VEC3perComp(*args)
VEC3perComp = _lcms.VEC3perComp

def VEC3equal(*args):
  return _lcms.VEC3equal(*args)
VEC3equal = _lcms.VEC3equal

def VEC3equalF(*args):
  return _lcms.VEC3equalF(*args)
VEC3equalF = _lcms.VEC3equalF

def VEC3scaleAndCut(*args):
  return _lcms.VEC3scaleAndCut(*args)
VEC3scaleAndCut = _lcms.VEC3scaleAndCut

def VEC3cross(*args):
  return _lcms.VEC3cross(*args)
VEC3cross = _lcms.VEC3cross

def VEC3saturate(*args):
  return _lcms.VEC3saturate(*args)
VEC3saturate = _lcms.VEC3saturate

def VEC3distance(*args):
  return _lcms.VEC3distance(*args)
VEC3distance = _lcms.VEC3distance

def VEC3length(*args):
  return _lcms.VEC3length(*args)
VEC3length = _lcms.VEC3length

def MAT3identity(*args):
  return _lcms.MAT3identity(*args)
MAT3identity = _lcms.MAT3identity

def MAT3per(*args):
  return _lcms.MAT3per(*args)
MAT3per = _lcms.MAT3per

def MAT3perK(*args):
  return _lcms.MAT3perK(*args)
MAT3perK = _lcms.MAT3perK

def MAT3inverse(*args):
  return _lcms.MAT3inverse(*args)
MAT3inverse = _lcms.MAT3inverse

def MAT3solve(*args):
  return _lcms.MAT3solve(*args)
MAT3solve = _lcms.MAT3solve

def MAT3det(*args):
  return _lcms.MAT3det(*args)
MAT3det = _lcms.MAT3det

def MAT3eval(*args):
  return _lcms.MAT3eval(*args)
MAT3eval = _lcms.MAT3eval

def MAT3toFix(*args):
  return _lcms.MAT3toFix(*args)
MAT3toFix = _lcms.MAT3toFix

def MAT3fromFix(*args):
  return _lcms.MAT3fromFix(*args)
MAT3fromFix = _lcms.MAT3fromFix

def MAT3evalW(*args):
  return _lcms.MAT3evalW(*args)
MAT3evalW = _lcms.MAT3evalW

def MAT3isIdentity(*args):
  return _lcms.MAT3isIdentity(*args)
MAT3isIdentity = _lcms.MAT3isIdentity

def MAT3scaleAndCut(*args):
  return _lcms.MAT3scaleAndCut(*args)
MAT3scaleAndCut = _lcms.MAT3scaleAndCut

def cmsIsLinear(*args):
  return _lcms.cmsIsLinear(*args)
cmsIsLinear = _lcms.cmsIsLinear
class L8PARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L8PARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L8PARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X0"] = _lcms.L8PARAMS_X0_set
    __swig_getmethods__["X0"] = _lcms.L8PARAMS_X0_get
    if _newclass:X0 = _swig_property(_lcms.L8PARAMS_X0_get, _lcms.L8PARAMS_X0_set)
    __swig_setmethods__["Y0"] = _lcms.L8PARAMS_Y0_set
    __swig_getmethods__["Y0"] = _lcms.L8PARAMS_Y0_get
    if _newclass:Y0 = _swig_property(_lcms.L8PARAMS_Y0_get, _lcms.L8PARAMS_Y0_set)
    __swig_setmethods__["Z0"] = _lcms.L8PARAMS_Z0_set
    __swig_getmethods__["Z0"] = _lcms.L8PARAMS_Z0_get
    if _newclass:Z0 = _swig_property(_lcms.L8PARAMS_Z0_get, _lcms.L8PARAMS_Z0_set)
    __swig_setmethods__["rx"] = _lcms.L8PARAMS_rx_set
    __swig_getmethods__["rx"] = _lcms.L8PARAMS_rx_get
    if _newclass:rx = _swig_property(_lcms.L8PARAMS_rx_get, _lcms.L8PARAMS_rx_set)
    __swig_setmethods__["ry"] = _lcms.L8PARAMS_ry_set
    __swig_getmethods__["ry"] = _lcms.L8PARAMS_ry_get
    if _newclass:ry = _swig_property(_lcms.L8PARAMS_ry_get, _lcms.L8PARAMS_ry_set)
    __swig_setmethods__["rz"] = _lcms.L8PARAMS_rz_set
    __swig_getmethods__["rz"] = _lcms.L8PARAMS_rz_get
    if _newclass:rz = _swig_property(_lcms.L8PARAMS_rz_get, _lcms.L8PARAMS_rz_set)
    def __init__(self): 
        this = _lcms.new_L8PARAMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_L8PARAMS
    __del__ = lambda self : None;
L8PARAMS_swigregister = _lcms.L8PARAMS_swigregister
L8PARAMS_swigregister(L8PARAMS)

class L16PARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L16PARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L16PARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nSamples"] = _lcms.L16PARAMS_nSamples_set
    __swig_getmethods__["nSamples"] = _lcms.L16PARAMS_nSamples_get
    if _newclass:nSamples = _swig_property(_lcms.L16PARAMS_nSamples_get, _lcms.L16PARAMS_nSamples_set)
    __swig_setmethods__["nInputs"] = _lcms.L16PARAMS_nInputs_set
    __swig_getmethods__["nInputs"] = _lcms.L16PARAMS_nInputs_get
    if _newclass:nInputs = _swig_property(_lcms.L16PARAMS_nInputs_get, _lcms.L16PARAMS_nInputs_set)
    __swig_setmethods__["nOutputs"] = _lcms.L16PARAMS_nOutputs_set
    __swig_getmethods__["nOutputs"] = _lcms.L16PARAMS_nOutputs_get
    if _newclass:nOutputs = _swig_property(_lcms.L16PARAMS_nOutputs_get, _lcms.L16PARAMS_nOutputs_set)
    __swig_setmethods__["Domain"] = _lcms.L16PARAMS_Domain_set
    __swig_getmethods__["Domain"] = _lcms.L16PARAMS_Domain_get
    if _newclass:Domain = _swig_property(_lcms.L16PARAMS_Domain_get, _lcms.L16PARAMS_Domain_set)
    __swig_setmethods__["opta1"] = _lcms.L16PARAMS_opta1_set
    __swig_getmethods__["opta1"] = _lcms.L16PARAMS_opta1_get
    if _newclass:opta1 = _swig_property(_lcms.L16PARAMS_opta1_get, _lcms.L16PARAMS_opta1_set)
    __swig_setmethods__["opta2"] = _lcms.L16PARAMS_opta2_set
    __swig_getmethods__["opta2"] = _lcms.L16PARAMS_opta2_get
    if _newclass:opta2 = _swig_property(_lcms.L16PARAMS_opta2_get, _lcms.L16PARAMS_opta2_set)
    __swig_setmethods__["opta3"] = _lcms.L16PARAMS_opta3_set
    __swig_getmethods__["opta3"] = _lcms.L16PARAMS_opta3_get
    if _newclass:opta3 = _swig_property(_lcms.L16PARAMS_opta3_get, _lcms.L16PARAMS_opta3_set)
    __swig_setmethods__["opta4"] = _lcms.L16PARAMS_opta4_set
    __swig_getmethods__["opta4"] = _lcms.L16PARAMS_opta4_get
    if _newclass:opta4 = _swig_property(_lcms.L16PARAMS_opta4_get, _lcms.L16PARAMS_opta4_set)
    __swig_setmethods__["opta5"] = _lcms.L16PARAMS_opta5_set
    __swig_getmethods__["opta5"] = _lcms.L16PARAMS_opta5_get
    if _newclass:opta5 = _swig_property(_lcms.L16PARAMS_opta5_get, _lcms.L16PARAMS_opta5_set)
    __swig_setmethods__["opta6"] = _lcms.L16PARAMS_opta6_set
    __swig_getmethods__["opta6"] = _lcms.L16PARAMS_opta6_get
    if _newclass:opta6 = _swig_property(_lcms.L16PARAMS_opta6_get, _lcms.L16PARAMS_opta6_set)
    __swig_setmethods__["opta7"] = _lcms.L16PARAMS_opta7_set
    __swig_getmethods__["opta7"] = _lcms.L16PARAMS_opta7_get
    if _newclass:opta7 = _swig_property(_lcms.L16PARAMS_opta7_get, _lcms.L16PARAMS_opta7_set)
    __swig_setmethods__["opta8"] = _lcms.L16PARAMS_opta8_set
    __swig_getmethods__["opta8"] = _lcms.L16PARAMS_opta8_get
    if _newclass:opta8 = _swig_property(_lcms.L16PARAMS_opta8_get, _lcms.L16PARAMS_opta8_set)
    __swig_setmethods__["Interp3D"] = _lcms.L16PARAMS_Interp3D_set
    __swig_getmethods__["Interp3D"] = _lcms.L16PARAMS_Interp3D_get
    if _newclass:Interp3D = _swig_property(_lcms.L16PARAMS_Interp3D_get, _lcms.L16PARAMS_Interp3D_set)
    __swig_setmethods__["p8"] = _lcms.L16PARAMS_p8_set
    __swig_getmethods__["p8"] = _lcms.L16PARAMS_p8_get
    if _newclass:p8 = _swig_property(_lcms.L16PARAMS_p8_get, _lcms.L16PARAMS_p8_set)
    def __init__(self): 
        this = _lcms.new_L16PARAMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_L16PARAMS
    __del__ = lambda self : None;
L16PARAMS_swigregister = _lcms.L16PARAMS_swigregister
L16PARAMS_swigregister(L16PARAMS)


def cmsCalcL16Params(*args):
  return _lcms.cmsCalcL16Params(*args)
cmsCalcL16Params = _lcms.cmsCalcL16Params

def cmsCalcCLUT16Params(*args):
  return _lcms.cmsCalcCLUT16Params(*args)
cmsCalcCLUT16Params = _lcms.cmsCalcCLUT16Params

def cmsCalcCLUT16ParamsEx(*args):
  return _lcms.cmsCalcCLUT16ParamsEx(*args)
cmsCalcCLUT16ParamsEx = _lcms.cmsCalcCLUT16ParamsEx

def cmsLinearInterpLUT16(*args):
  return _lcms.cmsLinearInterpLUT16(*args)
cmsLinearInterpLUT16 = _lcms.cmsLinearInterpLUT16

def cmsLinearInterpFixed(*args):
  return _lcms.cmsLinearInterpFixed(*args)
cmsLinearInterpFixed = _lcms.cmsLinearInterpFixed

def cmsReverseLinearInterpLUT16(*args):
  return _lcms.cmsReverseLinearInterpLUT16(*args)
cmsReverseLinearInterpLUT16 = _lcms.cmsReverseLinearInterpLUT16

def cmsTrilinearInterp16(*args):
  return _lcms.cmsTrilinearInterp16(*args)
cmsTrilinearInterp16 = _lcms.cmsTrilinearInterp16

def cmsTetrahedralInterp16(*args):
  return _lcms.cmsTetrahedralInterp16(*args)
cmsTetrahedralInterp16 = _lcms.cmsTetrahedralInterp16

def cmsTetrahedralInterp8(*args):
  return _lcms.cmsTetrahedralInterp8(*args)
cmsTetrahedralInterp8 = _lcms.cmsTetrahedralInterp8
LUT_HASMATRIX = _lcms.LUT_HASMATRIX
LUT_HASTL1 = _lcms.LUT_HASTL1
LUT_HASTL2 = _lcms.LUT_HASTL2
LUT_HAS3DGRID = _lcms.LUT_HAS3DGRID
LUT_HASMATRIX3 = _lcms.LUT_HASMATRIX3
LUT_HASMATRIX4 = _lcms.LUT_HASMATRIX4
LUT_HASTL3 = _lcms.LUT_HASTL3
LUT_HASTL4 = _lcms.LUT_HASTL4
LUT_V4_OUTPUT_EMULATE_V2 = _lcms.LUT_V4_OUTPUT_EMULATE_V2
LUT_V4_INPUT_EMULATE_V2 = _lcms.LUT_V4_INPUT_EMULATE_V2
LUT_V2_OUTPUT_EMULATE_V4 = _lcms.LUT_V2_OUTPUT_EMULATE_V4
LUT_V2_INPUT_EMULATE_V4 = _lcms.LUT_V2_INPUT_EMULATE_V4
class _lcms_LUT_struc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _lcms_LUT_struc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _lcms_LUT_struc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wFlags"] = _lcms._lcms_LUT_struc_wFlags_set
    __swig_getmethods__["wFlags"] = _lcms._lcms_LUT_struc_wFlags_get
    if _newclass:wFlags = _swig_property(_lcms._lcms_LUT_struc_wFlags_get, _lcms._lcms_LUT_struc_wFlags_set)
    __swig_setmethods__["Matrix"] = _lcms._lcms_LUT_struc_Matrix_set
    __swig_getmethods__["Matrix"] = _lcms._lcms_LUT_struc_Matrix_get
    if _newclass:Matrix = _swig_property(_lcms._lcms_LUT_struc_Matrix_get, _lcms._lcms_LUT_struc_Matrix_set)
    __swig_setmethods__["InputChan"] = _lcms._lcms_LUT_struc_InputChan_set
    __swig_getmethods__["InputChan"] = _lcms._lcms_LUT_struc_InputChan_get
    if _newclass:InputChan = _swig_property(_lcms._lcms_LUT_struc_InputChan_get, _lcms._lcms_LUT_struc_InputChan_set)
    __swig_setmethods__["OutputChan"] = _lcms._lcms_LUT_struc_OutputChan_set
    __swig_getmethods__["OutputChan"] = _lcms._lcms_LUT_struc_OutputChan_get
    if _newclass:OutputChan = _swig_property(_lcms._lcms_LUT_struc_OutputChan_get, _lcms._lcms_LUT_struc_OutputChan_set)
    __swig_setmethods__["InputEntries"] = _lcms._lcms_LUT_struc_InputEntries_set
    __swig_getmethods__["InputEntries"] = _lcms._lcms_LUT_struc_InputEntries_get
    if _newclass:InputEntries = _swig_property(_lcms._lcms_LUT_struc_InputEntries_get, _lcms._lcms_LUT_struc_InputEntries_set)
    __swig_setmethods__["OutputEntries"] = _lcms._lcms_LUT_struc_OutputEntries_set
    __swig_getmethods__["OutputEntries"] = _lcms._lcms_LUT_struc_OutputEntries_get
    if _newclass:OutputEntries = _swig_property(_lcms._lcms_LUT_struc_OutputEntries_get, _lcms._lcms_LUT_struc_OutputEntries_set)
    __swig_setmethods__["cLutPoints"] = _lcms._lcms_LUT_struc_cLutPoints_set
    __swig_getmethods__["cLutPoints"] = _lcms._lcms_LUT_struc_cLutPoints_get
    if _newclass:cLutPoints = _swig_property(_lcms._lcms_LUT_struc_cLutPoints_get, _lcms._lcms_LUT_struc_cLutPoints_set)
    __swig_setmethods__["L1"] = _lcms._lcms_LUT_struc_L1_set
    __swig_getmethods__["L1"] = _lcms._lcms_LUT_struc_L1_get
    if _newclass:L1 = _swig_property(_lcms._lcms_LUT_struc_L1_get, _lcms._lcms_LUT_struc_L1_set)
    __swig_setmethods__["L2"] = _lcms._lcms_LUT_struc_L2_set
    __swig_getmethods__["L2"] = _lcms._lcms_LUT_struc_L2_get
    if _newclass:L2 = _swig_property(_lcms._lcms_LUT_struc_L2_get, _lcms._lcms_LUT_struc_L2_set)
    __swig_setmethods__["T"] = _lcms._lcms_LUT_struc_T_set
    __swig_getmethods__["T"] = _lcms._lcms_LUT_struc_T_get
    if _newclass:T = _swig_property(_lcms._lcms_LUT_struc_T_get, _lcms._lcms_LUT_struc_T_set)
    __swig_setmethods__["Tsize"] = _lcms._lcms_LUT_struc_Tsize_set
    __swig_getmethods__["Tsize"] = _lcms._lcms_LUT_struc_Tsize_get
    if _newclass:Tsize = _swig_property(_lcms._lcms_LUT_struc_Tsize_get, _lcms._lcms_LUT_struc_Tsize_set)
    __swig_setmethods__["In16params"] = _lcms._lcms_LUT_struc_In16params_set
    __swig_getmethods__["In16params"] = _lcms._lcms_LUT_struc_In16params_get
    if _newclass:In16params = _swig_property(_lcms._lcms_LUT_struc_In16params_get, _lcms._lcms_LUT_struc_In16params_set)
    __swig_setmethods__["Out16params"] = _lcms._lcms_LUT_struc_Out16params_set
    __swig_getmethods__["Out16params"] = _lcms._lcms_LUT_struc_Out16params_get
    if _newclass:Out16params = _swig_property(_lcms._lcms_LUT_struc_Out16params_get, _lcms._lcms_LUT_struc_Out16params_set)
    __swig_setmethods__["CLut16params"] = _lcms._lcms_LUT_struc_CLut16params_set
    __swig_getmethods__["CLut16params"] = _lcms._lcms_LUT_struc_CLut16params_get
    if _newclass:CLut16params = _swig_property(_lcms._lcms_LUT_struc_CLut16params_get, _lcms._lcms_LUT_struc_CLut16params_set)
    __swig_setmethods__["Intent"] = _lcms._lcms_LUT_struc_Intent_set
    __swig_getmethods__["Intent"] = _lcms._lcms_LUT_struc_Intent_get
    if _newclass:Intent = _swig_property(_lcms._lcms_LUT_struc_Intent_get, _lcms._lcms_LUT_struc_Intent_set)
    __swig_setmethods__["Mat3"] = _lcms._lcms_LUT_struc_Mat3_set
    __swig_getmethods__["Mat3"] = _lcms._lcms_LUT_struc_Mat3_get
    if _newclass:Mat3 = _swig_property(_lcms._lcms_LUT_struc_Mat3_get, _lcms._lcms_LUT_struc_Mat3_set)
    __swig_setmethods__["Ofs3"] = _lcms._lcms_LUT_struc_Ofs3_set
    __swig_getmethods__["Ofs3"] = _lcms._lcms_LUT_struc_Ofs3_get
    if _newclass:Ofs3 = _swig_property(_lcms._lcms_LUT_struc_Ofs3_get, _lcms._lcms_LUT_struc_Ofs3_set)
    __swig_setmethods__["L3"] = _lcms._lcms_LUT_struc_L3_set
    __swig_getmethods__["L3"] = _lcms._lcms_LUT_struc_L3_get
    if _newclass:L3 = _swig_property(_lcms._lcms_LUT_struc_L3_get, _lcms._lcms_LUT_struc_L3_set)
    __swig_setmethods__["L3params"] = _lcms._lcms_LUT_struc_L3params_set
    __swig_getmethods__["L3params"] = _lcms._lcms_LUT_struc_L3params_get
    if _newclass:L3params = _swig_property(_lcms._lcms_LUT_struc_L3params_get, _lcms._lcms_LUT_struc_L3params_set)
    __swig_setmethods__["L3Entries"] = _lcms._lcms_LUT_struc_L3Entries_set
    __swig_getmethods__["L3Entries"] = _lcms._lcms_LUT_struc_L3Entries_get
    if _newclass:L3Entries = _swig_property(_lcms._lcms_LUT_struc_L3Entries_get, _lcms._lcms_LUT_struc_L3Entries_set)
    __swig_setmethods__["Mat4"] = _lcms._lcms_LUT_struc_Mat4_set
    __swig_getmethods__["Mat4"] = _lcms._lcms_LUT_struc_Mat4_get
    if _newclass:Mat4 = _swig_property(_lcms._lcms_LUT_struc_Mat4_get, _lcms._lcms_LUT_struc_Mat4_set)
    __swig_setmethods__["Ofs4"] = _lcms._lcms_LUT_struc_Ofs4_set
    __swig_getmethods__["Ofs4"] = _lcms._lcms_LUT_struc_Ofs4_get
    if _newclass:Ofs4 = _swig_property(_lcms._lcms_LUT_struc_Ofs4_get, _lcms._lcms_LUT_struc_Ofs4_set)
    __swig_setmethods__["L4"] = _lcms._lcms_LUT_struc_L4_set
    __swig_getmethods__["L4"] = _lcms._lcms_LUT_struc_L4_get
    if _newclass:L4 = _swig_property(_lcms._lcms_LUT_struc_L4_get, _lcms._lcms_LUT_struc_L4_set)
    __swig_setmethods__["L4params"] = _lcms._lcms_LUT_struc_L4params_set
    __swig_getmethods__["L4params"] = _lcms._lcms_LUT_struc_L4params_get
    if _newclass:L4params = _swig_property(_lcms._lcms_LUT_struc_L4params_get, _lcms._lcms_LUT_struc_L4params_set)
    __swig_setmethods__["L4Entries"] = _lcms._lcms_LUT_struc_L4Entries_set
    __swig_getmethods__["L4Entries"] = _lcms._lcms_LUT_struc_L4Entries_get
    if _newclass:L4Entries = _swig_property(_lcms._lcms_LUT_struc_L4Entries_get, _lcms._lcms_LUT_struc_L4Entries_set)
    __swig_setmethods__["FixGrayAxes"] = _lcms._lcms_LUT_struc_FixGrayAxes_set
    __swig_getmethods__["FixGrayAxes"] = _lcms._lcms_LUT_struc_FixGrayAxes_get
    if _newclass:FixGrayAxes = _swig_property(_lcms._lcms_LUT_struc_FixGrayAxes_get, _lcms._lcms_LUT_struc_FixGrayAxes_set)
    __swig_setmethods__["LCurvesSeed"] = _lcms._lcms_LUT_struc_LCurvesSeed_set
    __swig_getmethods__["LCurvesSeed"] = _lcms._lcms_LUT_struc_LCurvesSeed_get
    if _newclass:LCurvesSeed = _swig_property(_lcms._lcms_LUT_struc_LCurvesSeed_get, _lcms._lcms_LUT_struc_LCurvesSeed_set)
    def __init__(self): 
        this = _lcms.new__lcms_LUT_struc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete__lcms_LUT_struc
    __del__ = lambda self : None;
_lcms_LUT_struc_swigregister = _lcms._lcms_LUT_struc_swigregister
_lcms_LUT_struc_swigregister(_lcms_LUT_struc)


def _cmsSmoothEndpoints(*args):
  return _lcms._cmsSmoothEndpoints(*args)
_cmsSmoothEndpoints = _lcms._cmsSmoothEndpoints

def _cmsCrc32OfGammaTable(*args):
  return _lcms._cmsCrc32OfGammaTable(*args)
_cmsCrc32OfGammaTable = _lcms._cmsCrc32OfGammaTable

def cmsAllocSampledCurve(*args):
  return _lcms.cmsAllocSampledCurve(*args)
cmsAllocSampledCurve = _lcms.cmsAllocSampledCurve

def cmsFreeSampledCurve(*args):
  return _lcms.cmsFreeSampledCurve(*args)
cmsFreeSampledCurve = _lcms.cmsFreeSampledCurve

def cmsDupSampledCurve(*args):
  return _lcms.cmsDupSampledCurve(*args)
cmsDupSampledCurve = _lcms.cmsDupSampledCurve

def cmsConvertGammaToSampledCurve(*args):
  return _lcms.cmsConvertGammaToSampledCurve(*args)
cmsConvertGammaToSampledCurve = _lcms.cmsConvertGammaToSampledCurve

def cmsConvertSampledCurveToGamma(*args):
  return _lcms.cmsConvertSampledCurveToGamma(*args)
cmsConvertSampledCurveToGamma = _lcms.cmsConvertSampledCurveToGamma

def cmsEndpointsOfSampledCurve(*args):
  return _lcms.cmsEndpointsOfSampledCurve(*args)
cmsEndpointsOfSampledCurve = _lcms.cmsEndpointsOfSampledCurve

def cmsClampSampledCurve(*args):
  return _lcms.cmsClampSampledCurve(*args)
cmsClampSampledCurve = _lcms.cmsClampSampledCurve

def cmsSmoothSampledCurve(*args):
  return _lcms.cmsSmoothSampledCurve(*args)
cmsSmoothSampledCurve = _lcms.cmsSmoothSampledCurve

def cmsRescaleSampledCurve(*args):
  return _lcms.cmsRescaleSampledCurve(*args)
cmsRescaleSampledCurve = _lcms.cmsRescaleSampledCurve

def cmsJoinSampledCurves(*args):
  return _lcms.cmsJoinSampledCurves(*args)
cmsJoinSampledCurves = _lcms.cmsJoinSampledCurves
MATSHAPER_HASMATRIX = _lcms.MATSHAPER_HASMATRIX
MATSHAPER_HASSHAPER = _lcms.MATSHAPER_HASSHAPER
MATSHAPER_INPUT = _lcms.MATSHAPER_INPUT
MATSHAPER_OUTPUT = _lcms.MATSHAPER_OUTPUT
MATSHAPER_HASINPSHAPER = _lcms.MATSHAPER_HASINPSHAPER
MATSHAPER_ALLSMELTED = _lcms.MATSHAPER_ALLSMELTED
class MATSHAPER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MATSHAPER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MATSHAPER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dwFlags"] = _lcms.MATSHAPER_dwFlags_set
    __swig_getmethods__["dwFlags"] = _lcms.MATSHAPER_dwFlags_get
    if _newclass:dwFlags = _swig_property(_lcms.MATSHAPER_dwFlags_get, _lcms.MATSHAPER_dwFlags_set)
    __swig_setmethods__["Matrix"] = _lcms.MATSHAPER_Matrix_set
    __swig_getmethods__["Matrix"] = _lcms.MATSHAPER_Matrix_get
    if _newclass:Matrix = _swig_property(_lcms.MATSHAPER_Matrix_get, _lcms.MATSHAPER_Matrix_set)
    __swig_setmethods__["p16"] = _lcms.MATSHAPER_p16_set
    __swig_getmethods__["p16"] = _lcms.MATSHAPER_p16_get
    if _newclass:p16 = _swig_property(_lcms.MATSHAPER_p16_get, _lcms.MATSHAPER_p16_set)
    __swig_setmethods__["L"] = _lcms.MATSHAPER_L_set
    __swig_getmethods__["L"] = _lcms.MATSHAPER_L_get
    if _newclass:L = _swig_property(_lcms.MATSHAPER_L_get, _lcms.MATSHAPER_L_set)
    __swig_setmethods__["p2_16"] = _lcms.MATSHAPER_p2_16_set
    __swig_getmethods__["p2_16"] = _lcms.MATSHAPER_p2_16_get
    if _newclass:p2_16 = _swig_property(_lcms.MATSHAPER_p2_16_get, _lcms.MATSHAPER_p2_16_set)
    __swig_setmethods__["L2"] = _lcms.MATSHAPER_L2_set
    __swig_getmethods__["L2"] = _lcms.MATSHAPER_L2_get
    if _newclass:L2 = _swig_property(_lcms.MATSHAPER_L2_get, _lcms.MATSHAPER_L2_set)
    def __init__(self): 
        this = _lcms.new_MATSHAPER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_MATSHAPER
    __del__ = lambda self : None;
MATSHAPER_swigregister = _lcms.MATSHAPER_swigregister
MATSHAPER_swigregister(MATSHAPER)


def cmsAllocMatShaper(*args):
  return _lcms.cmsAllocMatShaper(*args)
cmsAllocMatShaper = _lcms.cmsAllocMatShaper

def cmsAllocMatShaper2(*args):
  return _lcms.cmsAllocMatShaper2(*args)
cmsAllocMatShaper2 = _lcms.cmsAllocMatShaper2

def cmsFreeMatShaper(*args):
  return _lcms.cmsFreeMatShaper(*args)
cmsFreeMatShaper = _lcms.cmsFreeMatShaper

def cmsEvalMatShaper(*args):
  return _lcms.cmsEvalMatShaper(*args)
cmsEvalMatShaper = _lcms.cmsEvalMatShaper

def cmsReadICCMatrixRGB2XYZ(*args):
  return _lcms.cmsReadICCMatrixRGB2XYZ(*args)
cmsReadICCMatrixRGB2XYZ = _lcms.cmsReadICCMatrixRGB2XYZ

def cmsBuildInputMatrixShaper(*args):
  return _lcms.cmsBuildInputMatrixShaper(*args)
cmsBuildInputMatrixShaper = _lcms.cmsBuildInputMatrixShaper

def cmsBuildOutputMatrixShaper(*args):
  return _lcms.cmsBuildOutputMatrixShaper(*args)
cmsBuildOutputMatrixShaper = _lcms.cmsBuildOutputMatrixShaper

def cmsAdaptationMatrix(*args):
  return _lcms.cmsAdaptationMatrix(*args)
cmsAdaptationMatrix = _lcms.cmsAdaptationMatrix

def cmsAdaptMatrixToD50(*args):
  return _lcms.cmsAdaptMatrixToD50(*args)
cmsAdaptMatrixToD50 = _lcms.cmsAdaptMatrixToD50

def cmsAdaptMatrixFromD50(*args):
  return _lcms.cmsAdaptMatrixFromD50(*args)
cmsAdaptMatrixFromD50 = _lcms.cmsAdaptMatrixFromD50

def cmsReadChromaticAdaptationMatrix(*args):
  return _lcms.cmsReadChromaticAdaptationMatrix(*args)
cmsReadChromaticAdaptationMatrix = _lcms.cmsReadChromaticAdaptationMatrix

def cmsXYZ2LabEncoded(*args):
  return _lcms.cmsXYZ2LabEncoded(*args)
cmsXYZ2LabEncoded = _lcms.cmsXYZ2LabEncoded

def cmsLab2XYZEncoded(*args):
  return _lcms.cmsLab2XYZEncoded(*args)
cmsLab2XYZEncoded = _lcms.cmsLab2XYZEncoded

def _cmsIdentifyWhitePoint(*args):
  return _lcms._cmsIdentifyWhitePoint(*args)
_cmsIdentifyWhitePoint = _lcms._cmsIdentifyWhitePoint

def _cmsQuantizeVal(*args):
  return _lcms._cmsQuantizeVal(*args)
_cmsQuantizeVal = _lcms._cmsQuantizeVal

def cmsAllocNamedColorList(*args):
  return _lcms.cmsAllocNamedColorList(*args)
cmsAllocNamedColorList = _lcms.cmsAllocNamedColorList

def cmsReadICCnamedColorList(*args):
  return _lcms.cmsReadICCnamedColorList(*args)
cmsReadICCnamedColorList = _lcms.cmsReadICCnamedColorList

def cmsFreeNamedColorList(*args):
  return _lcms.cmsFreeNamedColorList(*args)
cmsFreeNamedColorList = _lcms.cmsFreeNamedColorList

def cmsAppendNamedColor(*args):
  return _lcms.cmsAppendNamedColor(*args)
cmsAppendNamedColor = _lcms.cmsAppendNamedColor
MAX_TABLE_TAG = _lcms.MAX_TABLE_TAG
class LCMSICCPROFILE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LCMSICCPROFILE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LCMSICCPROFILE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _lcms.LCMSICCPROFILE_stream_set
    __swig_getmethods__["stream"] = _lcms.LCMSICCPROFILE_stream_get
    if _newclass:stream = _swig_property(_lcms.LCMSICCPROFILE_stream_get, _lcms.LCMSICCPROFILE_stream_set)
    __swig_setmethods__["DeviceClass"] = _lcms.LCMSICCPROFILE_DeviceClass_set
    __swig_getmethods__["DeviceClass"] = _lcms.LCMSICCPROFILE_DeviceClass_get
    if _newclass:DeviceClass = _swig_property(_lcms.LCMSICCPROFILE_DeviceClass_get, _lcms.LCMSICCPROFILE_DeviceClass_set)
    __swig_setmethods__["ColorSpace"] = _lcms.LCMSICCPROFILE_ColorSpace_set
    __swig_getmethods__["ColorSpace"] = _lcms.LCMSICCPROFILE_ColorSpace_get
    if _newclass:ColorSpace = _swig_property(_lcms.LCMSICCPROFILE_ColorSpace_get, _lcms.LCMSICCPROFILE_ColorSpace_set)
    __swig_setmethods__["PCS"] = _lcms.LCMSICCPROFILE_PCS_set
    __swig_getmethods__["PCS"] = _lcms.LCMSICCPROFILE_PCS_get
    if _newclass:PCS = _swig_property(_lcms.LCMSICCPROFILE_PCS_get, _lcms.LCMSICCPROFILE_PCS_set)
    __swig_setmethods__["RenderingIntent"] = _lcms.LCMSICCPROFILE_RenderingIntent_set
    __swig_getmethods__["RenderingIntent"] = _lcms.LCMSICCPROFILE_RenderingIntent_get
    if _newclass:RenderingIntent = _swig_property(_lcms.LCMSICCPROFILE_RenderingIntent_get, _lcms.LCMSICCPROFILE_RenderingIntent_set)
    __swig_setmethods__["flags"] = _lcms.LCMSICCPROFILE_flags_set
    __swig_getmethods__["flags"] = _lcms.LCMSICCPROFILE_flags_get
    if _newclass:flags = _swig_property(_lcms.LCMSICCPROFILE_flags_get, _lcms.LCMSICCPROFILE_flags_set)
    __swig_setmethods__["attributes"] = _lcms.LCMSICCPROFILE_attributes_set
    __swig_getmethods__["attributes"] = _lcms.LCMSICCPROFILE_attributes_get
    if _newclass:attributes = _swig_property(_lcms.LCMSICCPROFILE_attributes_get, _lcms.LCMSICCPROFILE_attributes_set)
    __swig_setmethods__["Illuminant"] = _lcms.LCMSICCPROFILE_Illuminant_set
    __swig_getmethods__["Illuminant"] = _lcms.LCMSICCPROFILE_Illuminant_get
    if _newclass:Illuminant = _swig_property(_lcms.LCMSICCPROFILE_Illuminant_get, _lcms.LCMSICCPROFILE_Illuminant_set)
    __swig_setmethods__["Version"] = _lcms.LCMSICCPROFILE_Version_set
    __swig_getmethods__["Version"] = _lcms.LCMSICCPROFILE_Version_get
    if _newclass:Version = _swig_property(_lcms.LCMSICCPROFILE_Version_get, _lcms.LCMSICCPROFILE_Version_set)
    __swig_setmethods__["ChromaticAdaptation"] = _lcms.LCMSICCPROFILE_ChromaticAdaptation_set
    __swig_getmethods__["ChromaticAdaptation"] = _lcms.LCMSICCPROFILE_ChromaticAdaptation_get
    if _newclass:ChromaticAdaptation = _swig_property(_lcms.LCMSICCPROFILE_ChromaticAdaptation_get, _lcms.LCMSICCPROFILE_ChromaticAdaptation_set)
    __swig_setmethods__["MediaWhitePoint"] = _lcms.LCMSICCPROFILE_MediaWhitePoint_set
    __swig_getmethods__["MediaWhitePoint"] = _lcms.LCMSICCPROFILE_MediaWhitePoint_get
    if _newclass:MediaWhitePoint = _swig_property(_lcms.LCMSICCPROFILE_MediaWhitePoint_get, _lcms.LCMSICCPROFILE_MediaWhitePoint_set)
    __swig_setmethods__["MediaBlackPoint"] = _lcms.LCMSICCPROFILE_MediaBlackPoint_set
    __swig_getmethods__["MediaBlackPoint"] = _lcms.LCMSICCPROFILE_MediaBlackPoint_get
    if _newclass:MediaBlackPoint = _swig_property(_lcms.LCMSICCPROFILE_MediaBlackPoint_get, _lcms.LCMSICCPROFILE_MediaBlackPoint_set)
    __swig_setmethods__["ProfileID"] = _lcms.LCMSICCPROFILE_ProfileID_set
    __swig_getmethods__["ProfileID"] = _lcms.LCMSICCPROFILE_ProfileID_get
    if _newclass:ProfileID = _swig_property(_lcms.LCMSICCPROFILE_ProfileID_get, _lcms.LCMSICCPROFILE_ProfileID_set)
    __swig_setmethods__["TagCount"] = _lcms.LCMSICCPROFILE_TagCount_set
    __swig_getmethods__["TagCount"] = _lcms.LCMSICCPROFILE_TagCount_get
    if _newclass:TagCount = _swig_property(_lcms.LCMSICCPROFILE_TagCount_get, _lcms.LCMSICCPROFILE_TagCount_set)
    __swig_setmethods__["TagNames"] = _lcms.LCMSICCPROFILE_TagNames_set
    __swig_getmethods__["TagNames"] = _lcms.LCMSICCPROFILE_TagNames_get
    if _newclass:TagNames = _swig_property(_lcms.LCMSICCPROFILE_TagNames_get, _lcms.LCMSICCPROFILE_TagNames_set)
    __swig_setmethods__["TagSizes"] = _lcms.LCMSICCPROFILE_TagSizes_set
    __swig_getmethods__["TagSizes"] = _lcms.LCMSICCPROFILE_TagSizes_get
    if _newclass:TagSizes = _swig_property(_lcms.LCMSICCPROFILE_TagSizes_get, _lcms.LCMSICCPROFILE_TagSizes_set)
    __swig_setmethods__["TagOffsets"] = _lcms.LCMSICCPROFILE_TagOffsets_set
    __swig_getmethods__["TagOffsets"] = _lcms.LCMSICCPROFILE_TagOffsets_get
    if _newclass:TagOffsets = _swig_property(_lcms.LCMSICCPROFILE_TagOffsets_get, _lcms.LCMSICCPROFILE_TagOffsets_set)
    __swig_setmethods__["TagPtrs"] = _lcms.LCMSICCPROFILE_TagPtrs_set
    __swig_getmethods__["TagPtrs"] = _lcms.LCMSICCPROFILE_TagPtrs_get
    if _newclass:TagPtrs = _swig_property(_lcms.LCMSICCPROFILE_TagPtrs_get, _lcms.LCMSICCPROFILE_TagPtrs_set)
    __swig_setmethods__["PhysicalFile"] = _lcms.LCMSICCPROFILE_PhysicalFile_set
    __swig_getmethods__["PhysicalFile"] = _lcms.LCMSICCPROFILE_PhysicalFile_get
    if _newclass:PhysicalFile = _swig_property(_lcms.LCMSICCPROFILE_PhysicalFile_get, _lcms.LCMSICCPROFILE_PhysicalFile_set)
    __swig_setmethods__["IsWrite"] = _lcms.LCMSICCPROFILE_IsWrite_set
    __swig_getmethods__["IsWrite"] = _lcms.LCMSICCPROFILE_IsWrite_get
    if _newclass:IsWrite = _swig_property(_lcms.LCMSICCPROFILE_IsWrite_get, _lcms.LCMSICCPROFILE_IsWrite_set)
    __swig_setmethods__["SaveAs8Bits"] = _lcms.LCMSICCPROFILE_SaveAs8Bits_set
    __swig_getmethods__["SaveAs8Bits"] = _lcms.LCMSICCPROFILE_SaveAs8Bits_get
    if _newclass:SaveAs8Bits = _swig_property(_lcms.LCMSICCPROFILE_SaveAs8Bits_get, _lcms.LCMSICCPROFILE_SaveAs8Bits_set)
    __swig_setmethods__["Created"] = _lcms.LCMSICCPROFILE_Created_set
    __swig_getmethods__["Created"] = _lcms.LCMSICCPROFILE_Created_get
    if _newclass:Created = _swig_property(_lcms.LCMSICCPROFILE_Created_get, _lcms.LCMSICCPROFILE_Created_set)
    __swig_setmethods__["Read"] = _lcms.LCMSICCPROFILE_Read_set
    __swig_getmethods__["Read"] = _lcms.LCMSICCPROFILE_Read_get
    if _newclass:Read = _swig_property(_lcms.LCMSICCPROFILE_Read_get, _lcms.LCMSICCPROFILE_Read_set)
    __swig_setmethods__["Seek"] = _lcms.LCMSICCPROFILE_Seek_set
    __swig_getmethods__["Seek"] = _lcms.LCMSICCPROFILE_Seek_get
    if _newclass:Seek = _swig_property(_lcms.LCMSICCPROFILE_Seek_get, _lcms.LCMSICCPROFILE_Seek_set)
    __swig_setmethods__["Close"] = _lcms.LCMSICCPROFILE_Close_set
    __swig_getmethods__["Close"] = _lcms.LCMSICCPROFILE_Close_get
    if _newclass:Close = _swig_property(_lcms.LCMSICCPROFILE_Close_get, _lcms.LCMSICCPROFILE_Close_set)
    __swig_setmethods__["Tell"] = _lcms.LCMSICCPROFILE_Tell_set
    __swig_getmethods__["Tell"] = _lcms.LCMSICCPROFILE_Tell_get
    if _newclass:Tell = _swig_property(_lcms.LCMSICCPROFILE_Tell_get, _lcms.LCMSICCPROFILE_Tell_set)
    __swig_setmethods__["Write"] = _lcms.LCMSICCPROFILE_Write_set
    __swig_getmethods__["Write"] = _lcms.LCMSICCPROFILE_Write_get
    if _newclass:Write = _swig_property(_lcms.LCMSICCPROFILE_Write_get, _lcms.LCMSICCPROFILE_Write_set)
    __swig_setmethods__["UsedSpace"] = _lcms.LCMSICCPROFILE_UsedSpace_set
    __swig_getmethods__["UsedSpace"] = _lcms.LCMSICCPROFILE_UsedSpace_get
    if _newclass:UsedSpace = _swig_property(_lcms.LCMSICCPROFILE_UsedSpace_get, _lcms.LCMSICCPROFILE_UsedSpace_set)
    def __init__(self): 
        this = _lcms.new_LCMSICCPROFILE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_LCMSICCPROFILE
    __del__ = lambda self : None;
LCMSICCPROFILE_swigregister = _lcms.LCMSICCPROFILE_swigregister
LCMSICCPROFILE_swigregister(LCMSICCPROFILE)


def _cmsCreateProfilePlaceholder():
  return _lcms._cmsCreateProfilePlaceholder()
_cmsCreateProfilePlaceholder = _lcms._cmsCreateProfilePlaceholder

def _cmsSearchTag(*args):
  return _lcms._cmsSearchTag(*args)
_cmsSearchTag = _lcms._cmsSearchTag

def _cmsInitTag(*args):
  return _lcms._cmsInitTag(*args)
_cmsInitTag = _lcms._cmsInitTag

def _cmsCreateProfileFromFilePlaceholder(*args):
  return _lcms._cmsCreateProfileFromFilePlaceholder(*args)
_cmsCreateProfileFromFilePlaceholder = _lcms._cmsCreateProfileFromFilePlaceholder

def _cmsCreateProfileFromMemPlaceholder(*args):
  return _lcms._cmsCreateProfileFromMemPlaceholder(*args)
_cmsCreateProfileFromMemPlaceholder = _lcms._cmsCreateProfileFromMemPlaceholder

def _cmsSetSaveToDisk(*args):
  return _lcms._cmsSetSaveToDisk(*args)
_cmsSetSaveToDisk = _lcms._cmsSetSaveToDisk

def _cmsSetSaveToMemory(*args):
  return _lcms._cmsSetSaveToMemory(*args)
_cmsSetSaveToMemory = _lcms._cmsSetSaveToMemory
class _cmsTRANSFORM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsTRANSFORM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsTRANSFORM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InputFormat"] = _lcms._cmsTRANSFORM_InputFormat_set
    __swig_getmethods__["InputFormat"] = _lcms._cmsTRANSFORM_InputFormat_get
    if _newclass:InputFormat = _swig_property(_lcms._cmsTRANSFORM_InputFormat_get, _lcms._cmsTRANSFORM_InputFormat_set)
    __swig_setmethods__["OutputFormat"] = _lcms._cmsTRANSFORM_OutputFormat_set
    __swig_getmethods__["OutputFormat"] = _lcms._cmsTRANSFORM_OutputFormat_get
    if _newclass:OutputFormat = _swig_property(_lcms._cmsTRANSFORM_OutputFormat_get, _lcms._cmsTRANSFORM_OutputFormat_set)
    __swig_setmethods__["StrideIn"] = _lcms._cmsTRANSFORM_StrideIn_set
    __swig_getmethods__["StrideIn"] = _lcms._cmsTRANSFORM_StrideIn_get
    if _newclass:StrideIn = _swig_property(_lcms._cmsTRANSFORM_StrideIn_get, _lcms._cmsTRANSFORM_StrideIn_set)
    __swig_setmethods__["StrideOut"] = _lcms._cmsTRANSFORM_StrideOut_set
    __swig_getmethods__["StrideOut"] = _lcms._cmsTRANSFORM_StrideOut_get
    if _newclass:StrideOut = _swig_property(_lcms._cmsTRANSFORM_StrideOut_get, _lcms._cmsTRANSFORM_StrideOut_set)
    __swig_setmethods__["Intent"] = _lcms._cmsTRANSFORM_Intent_set
    __swig_getmethods__["Intent"] = _lcms._cmsTRANSFORM_Intent_get
    if _newclass:Intent = _swig_property(_lcms._cmsTRANSFORM_Intent_get, _lcms._cmsTRANSFORM_Intent_set)
    __swig_setmethods__["ProofIntent"] = _lcms._cmsTRANSFORM_ProofIntent_set
    __swig_getmethods__["ProofIntent"] = _lcms._cmsTRANSFORM_ProofIntent_get
    if _newclass:ProofIntent = _swig_property(_lcms._cmsTRANSFORM_ProofIntent_get, _lcms._cmsTRANSFORM_ProofIntent_set)
    __swig_setmethods__["DoGamutCheck"] = _lcms._cmsTRANSFORM_DoGamutCheck_set
    __swig_getmethods__["DoGamutCheck"] = _lcms._cmsTRANSFORM_DoGamutCheck_get
    if _newclass:DoGamutCheck = _swig_property(_lcms._cmsTRANSFORM_DoGamutCheck_get, _lcms._cmsTRANSFORM_DoGamutCheck_set)
    __swig_setmethods__["InputProfile"] = _lcms._cmsTRANSFORM_InputProfile_set
    __swig_getmethods__["InputProfile"] = _lcms._cmsTRANSFORM_InputProfile_get
    if _newclass:InputProfile = _swig_property(_lcms._cmsTRANSFORM_InputProfile_get, _lcms._cmsTRANSFORM_InputProfile_set)
    __swig_setmethods__["OutputProfile"] = _lcms._cmsTRANSFORM_OutputProfile_set
    __swig_getmethods__["OutputProfile"] = _lcms._cmsTRANSFORM_OutputProfile_get
    if _newclass:OutputProfile = _swig_property(_lcms._cmsTRANSFORM_OutputProfile_get, _lcms._cmsTRANSFORM_OutputProfile_set)
    __swig_setmethods__["PreviewProfile"] = _lcms._cmsTRANSFORM_PreviewProfile_set
    __swig_getmethods__["PreviewProfile"] = _lcms._cmsTRANSFORM_PreviewProfile_get
    if _newclass:PreviewProfile = _swig_property(_lcms._cmsTRANSFORM_PreviewProfile_get, _lcms._cmsTRANSFORM_PreviewProfile_set)
    __swig_setmethods__["EntryColorSpace"] = _lcms._cmsTRANSFORM_EntryColorSpace_set
    __swig_getmethods__["EntryColorSpace"] = _lcms._cmsTRANSFORM_EntryColorSpace_get
    if _newclass:EntryColorSpace = _swig_property(_lcms._cmsTRANSFORM_EntryColorSpace_get, _lcms._cmsTRANSFORM_EntryColorSpace_set)
    __swig_setmethods__["ExitColorSpace"] = _lcms._cmsTRANSFORM_ExitColorSpace_set
    __swig_getmethods__["ExitColorSpace"] = _lcms._cmsTRANSFORM_ExitColorSpace_get
    if _newclass:ExitColorSpace = _swig_property(_lcms._cmsTRANSFORM_ExitColorSpace_get, _lcms._cmsTRANSFORM_ExitColorSpace_set)
    __swig_setmethods__["dwOriginalFlags"] = _lcms._cmsTRANSFORM_dwOriginalFlags_set
    __swig_getmethods__["dwOriginalFlags"] = _lcms._cmsTRANSFORM_dwOriginalFlags_get
    if _newclass:dwOriginalFlags = _swig_property(_lcms._cmsTRANSFORM_dwOriginalFlags_get, _lcms._cmsTRANSFORM_dwOriginalFlags_set)
    __swig_setmethods__["m1"] = _lcms._cmsTRANSFORM_m1_set
    __swig_getmethods__["m1"] = _lcms._cmsTRANSFORM_m1_get
    if _newclass:m1 = _swig_property(_lcms._cmsTRANSFORM_m1_get, _lcms._cmsTRANSFORM_m1_set)
    __swig_setmethods__["m2"] = _lcms._cmsTRANSFORM_m2_set
    __swig_getmethods__["m2"] = _lcms._cmsTRANSFORM_m2_get
    if _newclass:m2 = _swig_property(_lcms._cmsTRANSFORM_m2_get, _lcms._cmsTRANSFORM_m2_set)
    __swig_setmethods__["of1"] = _lcms._cmsTRANSFORM_of1_set
    __swig_getmethods__["of1"] = _lcms._cmsTRANSFORM_of1_get
    if _newclass:of1 = _swig_property(_lcms._cmsTRANSFORM_of1_get, _lcms._cmsTRANSFORM_of1_set)
    __swig_setmethods__["of2"] = _lcms._cmsTRANSFORM_of2_set
    __swig_getmethods__["of2"] = _lcms._cmsTRANSFORM_of2_get
    if _newclass:of2 = _swig_property(_lcms._cmsTRANSFORM_of2_get, _lcms._cmsTRANSFORM_of2_set)
    __swig_setmethods__["xform"] = _lcms._cmsTRANSFORM_xform_set
    __swig_getmethods__["xform"] = _lcms._cmsTRANSFORM_xform_get
    if _newclass:xform = _swig_property(_lcms._cmsTRANSFORM_xform_get, _lcms._cmsTRANSFORM_xform_set)
    __swig_setmethods__["FromInput"] = _lcms._cmsTRANSFORM_FromInput_set
    __swig_getmethods__["FromInput"] = _lcms._cmsTRANSFORM_FromInput_get
    if _newclass:FromInput = _swig_property(_lcms._cmsTRANSFORM_FromInput_get, _lcms._cmsTRANSFORM_FromInput_set)
    __swig_setmethods__["FromDevice"] = _lcms._cmsTRANSFORM_FromDevice_set
    __swig_getmethods__["FromDevice"] = _lcms._cmsTRANSFORM_FromDevice_get
    if _newclass:FromDevice = _swig_property(_lcms._cmsTRANSFORM_FromDevice_get, _lcms._cmsTRANSFORM_FromDevice_set)
    __swig_setmethods__["Stage1"] = _lcms._cmsTRANSFORM_Stage1_set
    __swig_getmethods__["Stage1"] = _lcms._cmsTRANSFORM_Stage1_get
    if _newclass:Stage1 = _swig_property(_lcms._cmsTRANSFORM_Stage1_get, _lcms._cmsTRANSFORM_Stage1_set)
    __swig_setmethods__["Stage2"] = _lcms._cmsTRANSFORM_Stage2_set
    __swig_getmethods__["Stage2"] = _lcms._cmsTRANSFORM_Stage2_get
    if _newclass:Stage2 = _swig_property(_lcms._cmsTRANSFORM_Stage2_get, _lcms._cmsTRANSFORM_Stage2_set)
    __swig_setmethods__["ToDevice"] = _lcms._cmsTRANSFORM_ToDevice_set
    __swig_getmethods__["ToDevice"] = _lcms._cmsTRANSFORM_ToDevice_get
    if _newclass:ToDevice = _swig_property(_lcms._cmsTRANSFORM_ToDevice_get, _lcms._cmsTRANSFORM_ToDevice_set)
    __swig_setmethods__["ToOutput"] = _lcms._cmsTRANSFORM_ToOutput_set
    __swig_getmethods__["ToOutput"] = _lcms._cmsTRANSFORM_ToOutput_get
    if _newclass:ToOutput = _swig_property(_lcms._cmsTRANSFORM_ToOutput_get, _lcms._cmsTRANSFORM_ToOutput_set)
    __swig_setmethods__["Device2PCS"] = _lcms._cmsTRANSFORM_Device2PCS_set
    __swig_getmethods__["Device2PCS"] = _lcms._cmsTRANSFORM_Device2PCS_get
    if _newclass:Device2PCS = _swig_property(_lcms._cmsTRANSFORM_Device2PCS_get, _lcms._cmsTRANSFORM_Device2PCS_set)
    __swig_setmethods__["PCS2Device"] = _lcms._cmsTRANSFORM_PCS2Device_set
    __swig_getmethods__["PCS2Device"] = _lcms._cmsTRANSFORM_PCS2Device_get
    if _newclass:PCS2Device = _swig_property(_lcms._cmsTRANSFORM_PCS2Device_get, _lcms._cmsTRANSFORM_PCS2Device_set)
    __swig_setmethods__["Gamut"] = _lcms._cmsTRANSFORM_Gamut_set
    __swig_getmethods__["Gamut"] = _lcms._cmsTRANSFORM_Gamut_get
    if _newclass:Gamut = _swig_property(_lcms._cmsTRANSFORM_Gamut_get, _lcms._cmsTRANSFORM_Gamut_set)
    __swig_setmethods__["Preview"] = _lcms._cmsTRANSFORM_Preview_set
    __swig_getmethods__["Preview"] = _lcms._cmsTRANSFORM_Preview_get
    if _newclass:Preview = _swig_property(_lcms._cmsTRANSFORM_Preview_get, _lcms._cmsTRANSFORM_Preview_set)
    __swig_setmethods__["DeviceLink"] = _lcms._cmsTRANSFORM_DeviceLink_set
    __swig_getmethods__["DeviceLink"] = _lcms._cmsTRANSFORM_DeviceLink_get
    if _newclass:DeviceLink = _swig_property(_lcms._cmsTRANSFORM_DeviceLink_get, _lcms._cmsTRANSFORM_DeviceLink_set)
    __swig_setmethods__["GamutCheck"] = _lcms._cmsTRANSFORM_GamutCheck_set
    __swig_getmethods__["GamutCheck"] = _lcms._cmsTRANSFORM_GamutCheck_get
    if _newclass:GamutCheck = _swig_property(_lcms._cmsTRANSFORM_GamutCheck_get, _lcms._cmsTRANSFORM_GamutCheck_set)
    __swig_setmethods__["InMatShaper"] = _lcms._cmsTRANSFORM_InMatShaper_set
    __swig_getmethods__["InMatShaper"] = _lcms._cmsTRANSFORM_InMatShaper_get
    if _newclass:InMatShaper = _swig_property(_lcms._cmsTRANSFORM_InMatShaper_get, _lcms._cmsTRANSFORM_InMatShaper_set)
    __swig_setmethods__["OutMatShaper"] = _lcms._cmsTRANSFORM_OutMatShaper_set
    __swig_getmethods__["OutMatShaper"] = _lcms._cmsTRANSFORM_OutMatShaper_get
    if _newclass:OutMatShaper = _swig_property(_lcms._cmsTRANSFORM_OutMatShaper_get, _lcms._cmsTRANSFORM_OutMatShaper_set)
    __swig_setmethods__["SmeltMatShaper"] = _lcms._cmsTRANSFORM_SmeltMatShaper_set
    __swig_getmethods__["SmeltMatShaper"] = _lcms._cmsTRANSFORM_SmeltMatShaper_get
    if _newclass:SmeltMatShaper = _swig_property(_lcms._cmsTRANSFORM_SmeltMatShaper_get, _lcms._cmsTRANSFORM_SmeltMatShaper_set)
    __swig_setmethods__["Phase1"] = _lcms._cmsTRANSFORM_Phase1_set
    __swig_getmethods__["Phase1"] = _lcms._cmsTRANSFORM_Phase1_get
    if _newclass:Phase1 = _swig_property(_lcms._cmsTRANSFORM_Phase1_get, _lcms._cmsTRANSFORM_Phase1_set)
    __swig_setmethods__["Phase2"] = _lcms._cmsTRANSFORM_Phase2_set
    __swig_getmethods__["Phase2"] = _lcms._cmsTRANSFORM_Phase2_get
    if _newclass:Phase2 = _swig_property(_lcms._cmsTRANSFORM_Phase2_get, _lcms._cmsTRANSFORM_Phase2_set)
    __swig_setmethods__["Phase3"] = _lcms._cmsTRANSFORM_Phase3_set
    __swig_getmethods__["Phase3"] = _lcms._cmsTRANSFORM_Phase3_get
    if _newclass:Phase3 = _swig_property(_lcms._cmsTRANSFORM_Phase3_get, _lcms._cmsTRANSFORM_Phase3_set)
    __swig_setmethods__["NamedColorList"] = _lcms._cmsTRANSFORM_NamedColorList_set
    __swig_getmethods__["NamedColorList"] = _lcms._cmsTRANSFORM_NamedColorList_get
    if _newclass:NamedColorList = _swig_property(_lcms._cmsTRANSFORM_NamedColorList_get, _lcms._cmsTRANSFORM_NamedColorList_set)
    __swig_setmethods__["lInputV4Lab"] = _lcms._cmsTRANSFORM_lInputV4Lab_set
    __swig_getmethods__["lInputV4Lab"] = _lcms._cmsTRANSFORM_lInputV4Lab_get
    if _newclass:lInputV4Lab = _swig_property(_lcms._cmsTRANSFORM_lInputV4Lab_get, _lcms._cmsTRANSFORM_lInputV4Lab_set)
    __swig_setmethods__["lOutputV4Lab"] = _lcms._cmsTRANSFORM_lOutputV4Lab_set
    __swig_getmethods__["lOutputV4Lab"] = _lcms._cmsTRANSFORM_lOutputV4Lab_get
    if _newclass:lOutputV4Lab = _swig_property(_lcms._cmsTRANSFORM_lOutputV4Lab_get, _lcms._cmsTRANSFORM_lOutputV4Lab_set)
    __swig_setmethods__["CacheIn"] = _lcms._cmsTRANSFORM_CacheIn_set
    __swig_getmethods__["CacheIn"] = _lcms._cmsTRANSFORM_CacheIn_get
    if _newclass:CacheIn = _swig_property(_lcms._cmsTRANSFORM_CacheIn_get, _lcms._cmsTRANSFORM_CacheIn_set)
    __swig_setmethods__["CacheOut"] = _lcms._cmsTRANSFORM_CacheOut_set
    __swig_getmethods__["CacheOut"] = _lcms._cmsTRANSFORM_CacheOut_get
    if _newclass:CacheOut = _swig_property(_lcms._cmsTRANSFORM_CacheOut_get, _lcms._cmsTRANSFORM_CacheOut_set)
    __swig_setmethods__["AdaptationState"] = _lcms._cmsTRANSFORM_AdaptationState_set
    __swig_getmethods__["AdaptationState"] = _lcms._cmsTRANSFORM_AdaptationState_get
    if _newclass:AdaptationState = _swig_property(_lcms._cmsTRANSFORM_AdaptationState_get, _lcms._cmsTRANSFORM_AdaptationState_set)
    __swig_setmethods__["rwlock"] = _lcms._cmsTRANSFORM_rwlock_set
    __swig_getmethods__["rwlock"] = _lcms._cmsTRANSFORM_rwlock_get
    if _newclass:rwlock = _swig_property(_lcms._cmsTRANSFORM_rwlock_get, _lcms._cmsTRANSFORM_rwlock_set)
    def __init__(self): 
        this = _lcms.new__cmsTRANSFORM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete__cmsTRANSFORM
    __del__ = lambda self : None;
_cmsTRANSFORM_swigregister = _lcms._cmsTRANSFORM_swigregister
_cmsTRANSFORM_swigregister(_cmsTRANSFORM)


def _cmsIdentifyInputFormat(*args):
  return _lcms._cmsIdentifyInputFormat(*args)
_cmsIdentifyInputFormat = _lcms._cmsIdentifyInputFormat

def _cmsIdentifyOutputFormat(*args):
  return _lcms._cmsIdentifyOutputFormat(*args)
_cmsIdentifyOutputFormat = _lcms._cmsIdentifyOutputFormat
XYZRel = _lcms.XYZRel
LabRel = _lcms.LabRel

def cmsChooseCnvrt(*args):
  return _lcms.cmsChooseCnvrt(*args)
cmsChooseCnvrt = _lcms.cmsChooseCnvrt

def _cmsEndPointsBySpace(*args):
  return _lcms._cmsEndPointsBySpace(*args)
_cmsEndPointsBySpace = _lcms._cmsEndPointsBySpace

def _cmsWhiteBySpace(*args):
  return _lcms._cmsWhiteBySpace(*args)
_cmsWhiteBySpace = _lcms._cmsWhiteBySpace

def Clamp_L(*args):
  return _lcms.Clamp_L(*args)
Clamp_L = _lcms.Clamp_L

def Clamp_ab(*args):
  return _lcms.Clamp_ab(*args)
Clamp_ab = _lcms.Clamp_ab
LCMS_BPFLAGS_D50_ADAPTED = _lcms.LCMS_BPFLAGS_D50_ADAPTED

def cmsDetectBlackPoint(*args):
  return _lcms.cmsDetectBlackPoint(*args)
cmsDetectBlackPoint = _lcms.cmsDetectBlackPoint

def _cmsReasonableGridpointsByColorspace(*args):
  return _lcms._cmsReasonableGridpointsByColorspace(*args)
_cmsReasonableGridpointsByColorspace = _lcms._cmsReasonableGridpointsByColorspace

def _cmsPrecalculateDeviceLink(*args):
  return _lcms._cmsPrecalculateDeviceLink(*args)
_cmsPrecalculateDeviceLink = _lcms._cmsPrecalculateDeviceLink

def _cmsPrecalculateBlackPreservingDeviceLink(*args):
  return _lcms._cmsPrecalculateBlackPreservingDeviceLink(*args)
_cmsPrecalculateBlackPreservingDeviceLink = _lcms._cmsPrecalculateBlackPreservingDeviceLink

def _cmsPrecalculateGamutCheck(*args):
  return _lcms._cmsPrecalculateGamutCheck(*args)
_cmsPrecalculateGamutCheck = _lcms._cmsPrecalculateGamutCheck

def _cmsFixWhiteMisalignment(*args):
  return _lcms._cmsFixWhiteMisalignment(*args)
_cmsFixWhiteMisalignment = _lcms._cmsFixWhiteMisalignment

def _cmsBlessLUT8(*args):
  return _lcms._cmsBlessLUT8(*args)
_cmsBlessLUT8 = _lcms._cmsBlessLUT8

def _cmsComputeGamutLUT(*args):
  return _lcms._cmsComputeGamutLUT(*args)
_cmsComputeGamutLUT = _lcms._cmsComputeGamutLUT

def _cmsComputeSoftProofLUT(*args):
  return _lcms._cmsComputeSoftProofLUT(*args)
_cmsComputeSoftProofLUT = _lcms._cmsComputeSoftProofLUT

def _cmsComputePrelinearizationTablesFromXFORM(*args):
  return _lcms._cmsComputePrelinearizationTablesFromXFORM(*args)
_cmsComputePrelinearizationTablesFromXFORM = _lcms._cmsComputePrelinearizationTablesFromXFORM

def _cmsBuildKToneCurve(*args):
  return _lcms._cmsBuildKToneCurve(*args)
_cmsBuildKToneCurve = _lcms._cmsBuildKToneCurve

def _cmsValidateLUT(*args):
  return _lcms._cmsValidateLUT(*args)
_cmsValidateLUT = _lcms._cmsValidateLUT
class icTagSignature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icTagSignature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icTagSignature, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lcms.new_icTagSignature(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_icTagSignature
    __del__ = lambda self : None;
icTagSignature_swigregister = _lcms.icTagSignature_swigregister
icTagSignature_swigregister(icTagSignature)

class StrPointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrPointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _lcms.new_StrPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _lcms.delete_StrPointer
    __del__ = lambda self : None;
StrPointer_swigregister = _lcms.StrPointer_swigregister
StrPointer_swigregister(StrPointer)

# This file is compatible with both classic and new-style classes.


